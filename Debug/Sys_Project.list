
Sys_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006208  08006208  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006208  08006208  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006208  08006208  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  20000074  08006284  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  08006284  00021d00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dbe  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003400  00000000  00000000  00038e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032b4  00000000  00000000  0003e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157a8  00000000  00000000  0004198c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933bf  00000000  00000000  00057134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d4  00000000  00000000  000ea548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fec 	.word	0x08005fec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005fec 	.word	0x08005fec

08000150 <Get_Btn_Task>:
void LedBlinkTask(void *argument);
void SetUART(void *argument);
void GetUART(void *argument);

/* USER CODE BEGIN PFP */
void Get_Btn_Task(void){
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	xSemaphoreGiveFromISR(Sph_Get_BtnHandle, NULL);
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <Get_Btn_Task+0x20>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	2100      	movs	r1, #0
 800015a:	4618      	mov	r0, r3
 800015c:	f003 fb94 	bl	8003888 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(Sph_Set_LedHandle, NULL);
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <Get_Btn_Task+0x24>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2100      	movs	r1, #0
 8000166:	4618      	mov	r0, r3
 8000168:	f003 fb8e 	bl	8003888 <xQueueGiveFromISR>
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	20001c04 	.word	0x20001c04
 8000174:	20001c10 	.word	0x20001c10

08000178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017c:	f000 fd28 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000180:	f000 f87c 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000184:	f000 f8ec 	bl	8000360 <MX_GPIO_Init>
  MX_USART2_Init();
 8000188:	f000 f8be 	bl	8000308 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800018c:	f002 fc12 	bl	80029b4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Guardian_UART */
  Guardian_UARTHandle = osMutexNew(&Guardian_UART_attributes);
 8000190:	4824      	ldr	r0, [pc, #144]	; (8000224 <main+0xac>)
 8000192:	f002 fd4d 	bl	8002c30 <osMutexNew>
 8000196:	4603      	mov	r3, r0
 8000198:	4a23      	ldr	r2, [pc, #140]	; (8000228 <main+0xb0>)
 800019a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sph_Get_Btn */
  Sph_Get_BtnHandle = osSemaphoreNew(4, 4, &Sph_Get_Btn_attributes);
 800019c:	4a23      	ldr	r2, [pc, #140]	; (800022c <main+0xb4>)
 800019e:	2104      	movs	r1, #4
 80001a0:	2004      	movs	r0, #4
 80001a2:	f002 fddf 	bl	8002d64 <osSemaphoreNew>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a21      	ldr	r2, [pc, #132]	; (8000230 <main+0xb8>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* creation of Sph_Set_Led */
  Sph_Set_LedHandle = osSemaphoreNew(4, 4, &Sph_Set_Led_attributes);
 80001ac:	4a21      	ldr	r2, [pc, #132]	; (8000234 <main+0xbc>)
 80001ae:	2104      	movs	r1, #4
 80001b0:	2004      	movs	r0, #4
 80001b2:	f002 fdd7 	bl	8002d64 <osSemaphoreNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a1f      	ldr	r2, [pc, #124]	; (8000238 <main+0xc0>)
 80001ba:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Scan_Queue */
  Scan_QueueHandle = osMessageQueueNew (4, sizeof(Symbol_TypeDef), &Scan_Queue_attributes);
 80001bc:	4a1f      	ldr	r2, [pc, #124]	; (800023c <main+0xc4>)
 80001be:	2107      	movs	r1, #7
 80001c0:	2004      	movs	r0, #4
 80001c2:	f002 fe6b 	bl	8002e9c <osMessageQueueNew>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a1d      	ldr	r2, [pc, #116]	; (8000240 <main+0xc8>)
 80001ca:	6013      	str	r3, [r2, #0]

  /* creation of Print_Queue */
  Print_QueueHandle = osMessageQueueNew (4, sizeof(Symbol_TypeDef), &Print_Queue_attributes);
 80001cc:	4a1d      	ldr	r2, [pc, #116]	; (8000244 <main+0xcc>)
 80001ce:	2107      	movs	r1, #7
 80001d0:	2004      	movs	r0, #4
 80001d2:	f002 fe63 	bl	8002e9c <osMessageQueueNew>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a1b      	ldr	r2, [pc, #108]	; (8000248 <main+0xd0>)
 80001da:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Event_Func */
  Event_FuncHandle = osThreadNew(HandlerBtnClick, NULL, &Event_Func_attributes);
 80001dc:	4a1b      	ldr	r2, [pc, #108]	; (800024c <main+0xd4>)
 80001de:	2100      	movs	r1, #0
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <main+0xd8>)
 80001e2:	f002 fc4d 	bl	8002a80 <osThreadNew>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a1a      	ldr	r2, [pc, #104]	; (8000254 <main+0xdc>)
 80001ea:	6013      	str	r3, [r2, #0]

  /* creation of Set_Led */
  Set_LedHandle = osThreadNew(LedBlinkTask, NULL, &Set_Led_attributes);
 80001ec:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <main+0xe0>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	481a      	ldr	r0, [pc, #104]	; (800025c <main+0xe4>)
 80001f2:	f002 fc45 	bl	8002a80 <osThreadNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a19      	ldr	r2, [pc, #100]	; (8000260 <main+0xe8>)
 80001fa:	6013      	str	r3, [r2, #0]

  /* creation of Set_UART */
  Set_UARTHandle = osThreadNew(SetUART, NULL, &Set_UART_attributes);
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <main+0xec>)
 80001fe:	2100      	movs	r1, #0
 8000200:	4819      	ldr	r0, [pc, #100]	; (8000268 <main+0xf0>)
 8000202:	f002 fc3d 	bl	8002a80 <osThreadNew>
 8000206:	4603      	mov	r3, r0
 8000208:	4a18      	ldr	r2, [pc, #96]	; (800026c <main+0xf4>)
 800020a:	6013      	str	r3, [r2, #0]

  /* creation of Get_UART */
  Get_UARTHandle = osThreadNew(GetUART, NULL, &Get_UART_attributes);
 800020c:	4a18      	ldr	r2, [pc, #96]	; (8000270 <main+0xf8>)
 800020e:	2100      	movs	r1, #0
 8000210:	4818      	ldr	r0, [pc, #96]	; (8000274 <main+0xfc>)
 8000212:	f002 fc35 	bl	8002a80 <osThreadNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a17      	ldr	r2, [pc, #92]	; (8000278 <main+0x100>)
 800021a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800021c:	f002 fbfc 	bl	8002a18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	e7fe      	b.n	8000220 <main+0xa8>
 8000222:	bf00      	nop
 8000224:	08006160 	.word	0x08006160
 8000228:	20001c0c 	.word	0x20001c0c
 800022c:	08006170 	.word	0x08006170
 8000230:	20001c04 	.word	0x20001c04
 8000234:	08006180 	.word	0x08006180
 8000238:	20001c10 	.word	0x20001c10
 800023c:	08006130 	.word	0x08006130
 8000240:	20001c18 	.word	0x20001c18
 8000244:	08006148 	.word	0x08006148
 8000248:	20001c14 	.word	0x20001c14
 800024c:	080060a0 	.word	0x080060a0
 8000250:	0800043d 	.word	0x0800043d
 8000254:	20001bfc 	.word	0x20001bfc
 8000258:	080060c4 	.word	0x080060c4
 800025c:	08000609 	.word	0x08000609
 8000260:	20001c00 	.word	0x20001c00
 8000264:	080060e8 	.word	0x080060e8
 8000268:	08000689 	.word	0x08000689
 800026c:	20001c08 	.word	0x20001c08
 8000270:	0800610c 	.word	0x0800610c
 8000274:	080007e5 	.word	0x080007e5
 8000278:	20001c60 	.word	0x20001c60

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f005 fe30 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 ffc9 	bl	800125c <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d0:	f000 fb02 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fa34 	bl	800175c <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 faed 	bl	80008d8 <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3740      	adds	r7, #64	; 0x40
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_USART2_Init+0x50>)
 800030e:	4a13      	ldr	r2, [pc, #76]	; (800035c <MX_USART2_Init+0x54>)
 8000310:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART2_Init+0x50>)
 8000314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000318:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_USART2_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <MX_USART2_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART2_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_USART2_Init+0x50>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART2_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_USART2_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART2_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_USART2_Init+0x50>)
 8000346:	f001 fe1d 	bl	8001f84 <HAL_USART_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 fac2 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20001c1c 	.word	0x20001c1c
 800035c:	40004400 	.word	0x40004400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b2d      	ldr	r3, [pc, #180]	; (800042c <MX_GPIO_Init+0xcc>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a2c      	ldr	r2, [pc, #176]	; (800042c <MX_GPIO_Init+0xcc>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b2a      	ldr	r3, [pc, #168]	; (800042c <MX_GPIO_Init+0xcc>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b27      	ldr	r3, [pc, #156]	; (800042c <MX_GPIO_Init+0xcc>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a26      	ldr	r2, [pc, #152]	; (800042c <MX_GPIO_Init+0xcc>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <MX_GPIO_Init+0xcc>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <MX_GPIO_Init+0xcc>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a20      	ldr	r2, [pc, #128]	; (800042c <MX_GPIO_Init+0xcc>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0xcc>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0xcc>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1a      	ldr	r2, [pc, #104]	; (800042c <MX_GPIO_Init+0xcc>)
 80003c2:	f043 0308 	orr.w	r3, r3, #8
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0xcc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0308 	and.w	r3, r3, #8
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2120      	movs	r1, #32
 80003d8:	4815      	ldr	r0, [pc, #84]	; (8000430 <MX_GPIO_Init+0xd0>)
 80003da:	f000 ff05 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_GPIO_Init+0xd4>)
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4811      	ldr	r0, [pc, #68]	; (8000438 <MX_GPIO_Init+0xd8>)
 80003f4:	f000 fd74 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f8:	2320      	movs	r3, #32
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000400:	2301      	movs	r3, #1
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000404:	2303      	movs	r3, #3
 8000406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4808      	ldr	r0, [pc, #32]	; (8000430 <MX_GPIO_Init+0xd0>)
 8000410:	f000 fd66 	bl	8000ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2105      	movs	r1, #5
 8000418:	2028      	movs	r0, #40	; 0x28
 800041a:	f000 fcc0 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800041e:	2028      	movs	r0, #40	; 0x28
 8000420:	f000 fcd9 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40021000 	.word	0x40021000
 8000430:	40010800 	.word	0x40010800
 8000434:	10110000 	.word	0x10110000
 8000438:	40011000 	.word	0x40011000

0800043c <HandlerBtnClick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HandlerBtnClick */
void HandlerBtnClick(void *argument)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
		Symbol_TypeDef	*Symbol						=	(Symbol_TypeDef*)malloc(
 8000444:	2007      	movs	r0, #7
 8000446:	f005 fd3d 	bl	8005ec4 <malloc>
 800044a:	4603      	mov	r3, r0
 800044c:	60fb      	str	r3, [r7, #12]
																 sizeof(Symbol_TypeDef));
		Symbol -> Bit_Number						= 	FIRST_BIT;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	2201      	movs	r2, #1
 8000452:	719a      	strb	r2, [r3, #6]

	/* Infinite loop */

	/*	Очистка листа семофоров - неправельная конфигурация CMSIS V2 */
	xSemaphoreTake(Sph_Get_BtnHandle, portMAX_DELAY);
 8000454:	4b69      	ldr	r3, [pc, #420]	; (80005fc <HandlerBtnClick+0x1c0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f04f 31ff 	mov.w	r1, #4294967295
 800045c:	4618      	mov	r0, r3
 800045e:	f003 fb81 	bl	8003b64 <xQueueSemaphoreTake>
	xSemaphoreTake(Sph_Get_BtnHandle, portMAX_DELAY);
 8000462:	4b66      	ldr	r3, [pc, #408]	; (80005fc <HandlerBtnClick+0x1c0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f04f 31ff 	mov.w	r1, #4294967295
 800046a:	4618      	mov	r0, r3
 800046c:	f003 fb7a 	bl	8003b64 <xQueueSemaphoreTake>
	xSemaphoreTake(Sph_Get_BtnHandle, portMAX_DELAY);
 8000470:	4b62      	ldr	r3, [pc, #392]	; (80005fc <HandlerBtnClick+0x1c0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f04f 31ff 	mov.w	r1, #4294967295
 8000478:	4618      	mov	r0, r3
 800047a:	f003 fb73 	bl	8003b64 <xQueueSemaphoreTake>
	xSemaphoreTake(Sph_Get_BtnHandle, portMAX_DELAY);
 800047e:	4b5f      	ldr	r3, [pc, #380]	; (80005fc <HandlerBtnClick+0x1c0>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f04f 31ff 	mov.w	r1, #4294967295
 8000486:	4618      	mov	r0, r3
 8000488:	f003 fb6c 	bl	8003b64 <xQueueSemaphoreTake>

	for(;;)
	{
		/*	Обнулить данные в битах, для более простой передачи через UART	*/
		Symbol -> First_Bit			=	(uint8_t) 0;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
		Symbol -> Second_Bit		=	(uint8_t) 0;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	2200      	movs	r2, #0
 8000496:	705a      	strb	r2, [r3, #1]
		Symbol -> Third_Bit			=	(uint8_t) 0;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2200      	movs	r2, #0
 800049c:	709a      	strb	r2, [r3, #2]
		Symbol -> Fourth_Bit		=	(uint8_t) 0;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	2200      	movs	r2, #0
 80004a2:	70da      	strb	r2, [r3, #3]
		Symbol -> Fifth_Bit			=	(uint8_t) 0;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	2200      	movs	r2, #0
 80004a8:	711a      	strb	r2, [r3, #4]
		Symbol -> Sixth_Bit			=	(uint8_t) 0;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	2200      	movs	r2, #0
 80004ae:	715a      	strb	r2, [r3, #5]

		xSemaphoreTake(Sph_Get_BtnHandle, portMAX_DELAY);
 80004b0:	4b52      	ldr	r3, [pc, #328]	; (80005fc <HandlerBtnClick+0x1c0>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f04f 31ff 	mov.w	r1, #4294967295
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 fb53 	bl	8003b64 <xQueueSemaphoreTake>

Point_Handling_Second_Bit:

		ActivTaskNumbe	=	1;
 80004be:	4b50      	ldr	r3, [pc, #320]	; (8000600 <HandlerBtnClick+0x1c4>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	601a      	str	r2, [r3, #0]

		/*	Детектирование нажатия как точки	*/
		if (xSemaphoreTake(Sph_Get_BtnHandle, TIME_DELAY_SPH) == pdFALSE)
 80004c4:	4b4d      	ldr	r3, [pc, #308]	; (80005fc <HandlerBtnClick+0x1c0>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004cc:	4618      	mov	r0, r3
 80004ce:	f003 fb49 	bl	8003b64 <xQueueSemaphoreTake>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d13d      	bne.n	8000554 <HandlerBtnClick+0x118>
		{
			switch(Symbol -> Bit_Number)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	799b      	ldrb	r3, [r3, #6]
 80004dc:	3b01      	subs	r3, #1
 80004de:	2b05      	cmp	r3, #5
 80004e0:	d876      	bhi.n	80005d0 <HandlerBtnClick+0x194>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <HandlerBtnClick+0xac>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	08000501 	.word	0x08000501
 80004ec:	0800050f 	.word	0x0800050f
 80004f0:	0800051d 	.word	0x0800051d
 80004f4:	0800052b 	.word	0x0800052b
 80004f8:	08000539 	.word	0x08000539
 80004fc:	08000547 	.word	0x08000547
			{
				case FIRST_BIT:
				{
					Symbol -> First_Bit			=	Point;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
					Symbol -> Bit_Number		= 	SECOND_BIT;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2202      	movs	r2, #2
 800050a:	719a      	strb	r2, [r3, #6]
				}break;
 800050c:	e060      	b.n	80005d0 <HandlerBtnClick+0x194>
				case SECOND_BIT:
				{
					Symbol -> Second_Bit		=	Point;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2201      	movs	r2, #1
 8000512:	705a      	strb	r2, [r3, #1]
					Symbol -> Bit_Number		= 	THIRD_BIT;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2203      	movs	r2, #3
 8000518:	719a      	strb	r2, [r3, #6]
				}break;
 800051a:	e059      	b.n	80005d0 <HandlerBtnClick+0x194>
				case THIRD_BIT:
				{
					Symbol -> Third_Bit			=	Point;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2201      	movs	r2, #1
 8000520:	709a      	strb	r2, [r3, #2]
					Symbol -> Bit_Number		= 	FOURTH_BIT;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2204      	movs	r2, #4
 8000526:	719a      	strb	r2, [r3, #6]
				}break;
 8000528:	e052      	b.n	80005d0 <HandlerBtnClick+0x194>
				case FOURTH_BIT:
				{
					Symbol -> Fourth_Bit		=	Point;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2201      	movs	r2, #1
 800052e:	70da      	strb	r2, [r3, #3]
					Symbol -> Bit_Number		= 	FIFTH_BIT;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2205      	movs	r2, #5
 8000534:	719a      	strb	r2, [r3, #6]
				}break;
 8000536:	e04b      	b.n	80005d0 <HandlerBtnClick+0x194>
				case FIFTH_BIT:
				{
					Symbol -> Fifth_Bit			=	Point;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2201      	movs	r2, #1
 800053c:	711a      	strb	r2, [r3, #4]
					Symbol -> Bit_Number		= 	SIXTH_BIT;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2206      	movs	r2, #6
 8000542:	719a      	strb	r2, [r3, #6]
				}break;
 8000544:	e044      	b.n	80005d0 <HandlerBtnClick+0x194>
				case SIXTH_BIT:
				{
					Symbol -> Sixth_Bit			=	Point;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2201      	movs	r2, #1
 800054a:	715a      	strb	r2, [r3, #5]
					Symbol -> Bit_Number		= 	END_BIT;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2207      	movs	r2, #7
 8000550:	719a      	strb	r2, [r3, #6]
				}break;
 8000552:	e03d      	b.n	80005d0 <HandlerBtnClick+0x194>
			}
		}
		/*	Детектирование нажатия как тире	*/
		else
		{
			switch(Symbol -> Bit_Number)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	3b01      	subs	r3, #1
 800055a:	2b05      	cmp	r3, #5
 800055c:	d838      	bhi.n	80005d0 <HandlerBtnClick+0x194>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <HandlerBtnClick+0x128>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	0800057d 	.word	0x0800057d
 8000568:	0800058b 	.word	0x0800058b
 800056c:	08000599 	.word	0x08000599
 8000570:	080005a7 	.word	0x080005a7
 8000574:	080005b5 	.word	0x080005b5
 8000578:	080005c3 	.word	0x080005c3
			{
				case FIRST_BIT:
				{
					Symbol -> First_Bit			=	Dash;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2202      	movs	r2, #2
 8000580:	701a      	strb	r2, [r3, #0]
					Symbol -> Bit_Number		= 	SECOND_BIT;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2202      	movs	r2, #2
 8000586:	719a      	strb	r2, [r3, #6]
				}break;
 8000588:	e022      	b.n	80005d0 <HandlerBtnClick+0x194>
				case SECOND_BIT:
				{
					Symbol -> Second_Bit		=	Dash;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2202      	movs	r2, #2
 800058e:	705a      	strb	r2, [r3, #1]
					Symbol -> Bit_Number		= 	THIRD_BIT;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2203      	movs	r2, #3
 8000594:	719a      	strb	r2, [r3, #6]
				}break;
 8000596:	e01b      	b.n	80005d0 <HandlerBtnClick+0x194>
				case THIRD_BIT:
				{
					Symbol -> Third_Bit			=	Dash;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2202      	movs	r2, #2
 800059c:	709a      	strb	r2, [r3, #2]
					Symbol -> Bit_Number		= 	FOURTH_BIT;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2204      	movs	r2, #4
 80005a2:	719a      	strb	r2, [r3, #6]
				}break;
 80005a4:	e014      	b.n	80005d0 <HandlerBtnClick+0x194>
				case FOURTH_BIT:
				{
					Symbol -> Fourth_Bit		=	Dash;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2202      	movs	r2, #2
 80005aa:	70da      	strb	r2, [r3, #3]
					Symbol -> Bit_Number		= 	FIFTH_BIT;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2205      	movs	r2, #5
 80005b0:	719a      	strb	r2, [r3, #6]
				}break;
 80005b2:	e00d      	b.n	80005d0 <HandlerBtnClick+0x194>
				case FIFTH_BIT:
				{
					Symbol -> Fifth_Bit			=	Dash;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2202      	movs	r2, #2
 80005b8:	711a      	strb	r2, [r3, #4]
					Symbol -> Bit_Number		= 	SIXTH_BIT;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2206      	movs	r2, #6
 80005be:	719a      	strb	r2, [r3, #6]
				}break;
 80005c0:	e006      	b.n	80005d0 <HandlerBtnClick+0x194>
				case SIXTH_BIT:
				{
					Symbol -> Sixth_Bit			=	Dash;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2202      	movs	r2, #2
 80005c6:	715a      	strb	r2, [r3, #5]
					Symbol -> Bit_Number		= 	END_BIT;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2207      	movs	r2, #7
 80005cc:	719a      	strb	r2, [r3, #6]
				}break;
 80005ce:	bf00      	nop
				};
			}
		}

		/*	Обработка пропуска между символами	*/
		switch(xSemaphoreTake(Sph_Get_BtnHandle, 2 * TIME_DELAY_SPH))
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HandlerBtnClick+0x1c0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fac3 	bl	8003b64 <xQueueSemaphoreTake>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	f47f af6c 	bne.w	80004be <HandlerBtnClick+0x82>
		{
			case pdFALSE:
			{
				/*	Перемещение данных в очередь, для отправки в UART	*/
				xQueueSendToBack(Print_QueueHandle, Symbol, portMAX_DELAY);
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HandlerBtnClick+0x1c8>)
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	f04f 32ff 	mov.w	r2, #4294967295
 80005f0:	68f9      	ldr	r1, [r7, #12]
 80005f2:	f002 ffb3 	bl	800355c <xQueueGenericSend>
			}break;
 80005f6:	bf00      	nop
		Symbol -> First_Bit			=	(uint8_t) 0;
 80005f8:	e748      	b.n	800048c <HandlerBtnClick+0x50>
 80005fa:	bf00      	nop
 80005fc:	20001c04 	.word	0x20001c04
 8000600:	20000090 	.word	0x20000090
 8000604:	20001c14 	.word	0x20001c14

08000608 <LedBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedBlinkTask */
void LedBlinkTask(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

		/*	Для указания, что произошло переключение задач.
		Number_Itaration				=	2u;*/

	/*	Очистка листа семофоров - неправельная конфигурация CMSIS V2 */
	xSemaphoreTake(Sph_Set_LedHandle, portMAX_DELAY);
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <LedBlinkTask+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f04f 31ff 	mov.w	r1, #4294967295
 8000618:	4618      	mov	r0, r3
 800061a:	f003 faa3 	bl	8003b64 <xQueueSemaphoreTake>
	xSemaphoreTake(Sph_Set_LedHandle, portMAX_DELAY);
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <LedBlinkTask+0x74>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f04f 31ff 	mov.w	r1, #4294967295
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fa9c 	bl	8003b64 <xQueueSemaphoreTake>
	xSemaphoreTake(Sph_Set_LedHandle, portMAX_DELAY);
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <LedBlinkTask+0x74>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f04f 31ff 	mov.w	r1, #4294967295
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fa95 	bl	8003b64 <xQueueSemaphoreTake>
	xSemaphoreTake(Sph_Set_LedHandle, portMAX_DELAY);
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <LedBlinkTask+0x74>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f04f 31ff 	mov.w	r1, #4294967295
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fa8e 	bl	8003b64 <xQueueSemaphoreTake>

	/* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(Sph_Set_LedHandle, portMAX_DELAY);
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <LedBlinkTask+0x74>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f04f 31ff 	mov.w	r1, #4294967295
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fa87 	bl	8003b64 <xQueueSemaphoreTake>
		ActivTaskNumbe	=	2;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <LedBlinkTask+0x78>)
 8000658:	2202      	movs	r2, #2
 800065a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET );
 800065c:	2201      	movs	r2, #1
 800065e:	2120      	movs	r1, #32
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <LedBlinkTask+0x7c>)
 8000662:	f000 fdc1 	bl	80011e8 <HAL_GPIO_WritePin>
			osDelay(TIME_DELAY_SPH);
 8000666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066a:	f002 fab3 	bl	8002bd4 <osDelay>
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET );
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <LedBlinkTask+0x7c>)
 8000674:	f000 fdb8 	bl	80011e8 <HAL_GPIO_WritePin>
		xSemaphoreTake(Sph_Set_LedHandle, portMAX_DELAY);
 8000678:	e7e6      	b.n	8000648 <LedBlinkTask+0x40>
 800067a:	bf00      	nop
 800067c:	20001c10 	.word	0x20001c10
 8000680:	20000090 	.word	0x20000090
 8000684:	40010800 	.word	0x40010800

08000688 <SetUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetUART */
void SetUART(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SetUART */
	Symbol_TypeDef *Transmit_Symbol				=	(Symbol_TypeDef*)malloc(
 8000690:	2007      	movs	r0, #7
 8000692:	f005 fc17 	bl	8005ec4 <malloc>
 8000696:	4603      	mov	r3, r0
 8000698:	613b      	str	r3, [r7, #16]
			 	 	 	 	 	 	 	 	 	 	 	 	 	 	 sizeof(Symbol_TypeDef));;
	uint8_t	Sumbol_Bits[6] = {0, 0, 0, 0, 0, 0};
 800069a:	4a4d      	ldr	r2, [pc, #308]	; (80007d0 <SetUART+0x148>)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a4:	6018      	str	r0, [r3, #0]
 80006a6:	3304      	adds	r3, #4
 80006a8:	8019      	strh	r1, [r3, #0]
	/* Infinite loop */
	for(;;)
	{
		ActivTaskNumbe	=	3;
 80006aa:	4b4a      	ldr	r3, [pc, #296]	; (80007d4 <SetUART+0x14c>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	601a      	str	r2, [r3, #0]
		xQueueReceive(Print_QueueHandle, Transmit_Symbol, portMAX_DELAY);
 80006b0:	4b49      	ldr	r3, [pc, #292]	; (80007d8 <SetUART+0x150>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	6939      	ldr	r1, [r7, #16]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f972 	bl	80039a4 <xQueueReceive>
		/*	Создание вектора типа uint8_t, состоящего из данных нажатия на кнопку
		 * для передачи через UART
		 */
		for (uint8_t	Number_Bits = 0; Number_Bits < 7; Number_Bits ++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	e05f      	b.n	8000786 <SetUART+0xfe>
		{
			switch(Number_Bits)
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	2b05      	cmp	r3, #5
 80006cc:	d850      	bhi.n	8000770 <SetUART+0xe8>
 80006ce:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <SetUART+0x4c>)
 80006d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d4:	080006ed 	.word	0x080006ed
 80006d8:	08000703 	.word	0x08000703
 80006dc:	08000719 	.word	0x08000719
 80006e0:	0800072f 	.word	0x0800072f
 80006e4:	08000745 	.word	0x08000745
 80006e8:	0800075b 	.word	0x0800075b
			{
				case FIRST_BIT:
				{
					Sumbol_Bits[Number_Bits]	=	Transmit_Symbol -> First_Bit + Offset;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	3230      	adds	r2, #48	; 0x30
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	f107 0118 	add.w	r1, r7, #24
 80006fa:	440b      	add	r3, r1
 80006fc:	f803 2c10 	strb.w	r2, [r3, #-16]
				}break;
 8000700:	e036      	b.n	8000770 <SetUART+0xe8>
				case SECOND_BIT:
				{
					Sumbol_Bits[Number_Bits]	=	Transmit_Symbol -> Second_Bit + Offset;
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	785a      	ldrb	r2, [r3, #1]
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	3230      	adds	r2, #48	; 0x30
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	f107 0118 	add.w	r1, r7, #24
 8000710:	440b      	add	r3, r1
 8000712:	f803 2c10 	strb.w	r2, [r3, #-16]
				}break;
 8000716:	e02b      	b.n	8000770 <SetUART+0xe8>
				case THIRD_BIT:
				{
					Sumbol_Bits[Number_Bits]	=	Transmit_Symbol -> Third_Bit + Offset;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	789a      	ldrb	r2, [r3, #2]
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	3230      	adds	r2, #48	; 0x30
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	f107 0118 	add.w	r1, r7, #24
 8000726:	440b      	add	r3, r1
 8000728:	f803 2c10 	strb.w	r2, [r3, #-16]
				}break;
 800072c:	e020      	b.n	8000770 <SetUART+0xe8>
				case FOURTH_BIT:
				{
					Sumbol_Bits[Number_Bits]	=	Transmit_Symbol -> Fourth_Bit + Offset;
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	78da      	ldrb	r2, [r3, #3]
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	3230      	adds	r2, #48	; 0x30
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	f107 0118 	add.w	r1, r7, #24
 800073c:	440b      	add	r3, r1
 800073e:	f803 2c10 	strb.w	r2, [r3, #-16]
				}break;
 8000742:	e015      	b.n	8000770 <SetUART+0xe8>
				case FIFTH_BIT:
				{
					Sumbol_Bits[Number_Bits]	=	Transmit_Symbol -> Fifth_Bit + Offset;
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	791a      	ldrb	r2, [r3, #4]
 8000748:	7dfb      	ldrb	r3, [r7, #23]
 800074a:	3230      	adds	r2, #48	; 0x30
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	f107 0118 	add.w	r1, r7, #24
 8000752:	440b      	add	r3, r1
 8000754:	f803 2c10 	strb.w	r2, [r3, #-16]
				}break;
 8000758:	e00a      	b.n	8000770 <SetUART+0xe8>
				case SIXTH_BIT:
				{
					Sumbol_Bits[Number_Bits]	=	Transmit_Symbol -> Sixth_Bit + Offset;
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	795a      	ldrb	r2, [r3, #5]
 800075e:	7dfb      	ldrb	r3, [r7, #23]
 8000760:	3230      	adds	r2, #48	; 0x30
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	f107 0118 	add.w	r1, r7, #24
 8000768:	440b      	add	r3, r1
 800076a:	f803 2c10 	strb.w	r2, [r3, #-16]
				}break;
 800076e:	bf00      	nop
				default:
				{
				};
			}
			if (Sumbol_Bits[Number_Bits] == (uint8_t) 0)
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	f107 0218 	add.w	r2, r7, #24
 8000776:	4413      	add	r3, r2
 8000778:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d006      	beq.n	800078e <SetUART+0x106>
		for (uint8_t	Number_Bits = 0; Number_Bits < 7; Number_Bits ++)
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	3301      	adds	r3, #1
 8000784:	75fb      	strb	r3, [r7, #23]
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	2b06      	cmp	r3, #6
 800078a:	d99c      	bls.n	80006c6 <SetUART+0x3e>
 800078c:	e000      	b.n	8000790 <SetUART+0x108>
			{
				break;
 800078e:	bf00      	nop
			}
		}
		Sumbol_Bits[END_BIT] 					=	0;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
		xSemaphoreTake(Guardian_UARTHandle, portMAX_DELAY);
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <SetUART+0x154>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	4618      	mov	r0, r3
 800079e:	f003 f9e1 	bl	8003b64 <xQueueSemaphoreTake>
		HAL_USART_Transmit_IT(&husart2, Sumbol_Bits, 6);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2206      	movs	r2, #6
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <SetUART+0x158>)
 80007ac:	f001 fc2b 	bl	8002006 <HAL_USART_Transmit_IT>

		/*	Ожидание завершения передачи	*/
		while(HAL_USART_GetState(&husart2) == HAL_USART_STATE_BUSY_TX )
 80007b0:	bf00      	nop
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <SetUART+0x158>)
 80007b4:	f001 fdfe 	bl	80023b4 <HAL_USART_GetState>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b12      	cmp	r3, #18
 80007bc:	d0f9      	beq.n	80007b2 <SetUART+0x12a>
		{
		}

		xSemaphoreGive(Guardian_UARTHandle);
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <SetUART+0x154>)
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	f002 fec8 	bl	800355c <xQueueGenericSend>
		ActivTaskNumbe	=	3;
 80007cc:	e76d      	b.n	80006aa <SetUART+0x22>
 80007ce:	bf00      	nop
 80007d0:	08006070 	.word	0x08006070
 80007d4:	20000090 	.word	0x20000090
 80007d8:	20001c14 	.word	0x20001c14
 80007dc:	20001c0c 	.word	0x20001c0c
 80007e0:	20001c1c 	.word	0x20001c1c

080007e4 <GetUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetUART */
void GetUART(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GetUART */
	uint8_t	*Sumbol_Bits[6];
	/* Infinite loop */
	xSemaphoreTake(Guardian_UARTHandle, portMAX_DELAY);
 80007ec:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <GetUART+0xc0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 f9b5 	bl	8003b64 <xQueueSemaphoreTake>
	for(;;)
	{
		ActivTaskNumbe	=	4;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <GetUART+0xc4>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	601a      	str	r2, [r3, #0]
		xSemaphoreTake(Guardian_UARTHandle, portMAX_DELAY);
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <GetUART+0xc0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f9ab 	bl	8003b64 <xQueueSemaphoreTake>
		HAL_USART_Receive_IT(&husart2, Sumbol_Bits, 6);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2206      	movs	r2, #6
 8000814:	4619      	mov	r1, r3
 8000816:	4825      	ldr	r0, [pc, #148]	; (80008ac <GetUART+0xc8>)
 8000818:	f001 fc39 	bl	800208e <HAL_USART_Receive_IT>

		/*	Ожидание завершения приёма	*/
		while(HAL_USART_GetState(&husart2) == HAL_USART_STATE_BUSY_RX )
 800081c:	bf00      	nop
 800081e:	4823      	ldr	r0, [pc, #140]	; (80008ac <GetUART+0xc8>)
 8000820:	f001 fdc8 	bl	80023b4 <HAL_USART_GetState>
 8000824:	4603      	mov	r3, r0
 8000826:	2b22      	cmp	r3, #34	; 0x22
 8000828:	d0f9      	beq.n	800081e <GetUART+0x3a>
		{
		}

		xSemaphoreGive(Guardian_UARTHandle);
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <GetUART+0xc0>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	f002 fe92 	bl	800355c <xQueueGenericSend>

		/*	Динамическая индикация, на основе принятых данных	*/
		for (uint8_t	Number_Bits = 0; Number_Bits < 7; Number_Bits ++)
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800083e:	e02c      	b.n	800089a <GetUART+0xb6>
		{
			if (Sumbol_Bits[Number_Bits] - Offset == Point)
 8000840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800084a:	4413      	add	r3, r2
 800084c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000850:	3b30      	subs	r3, #48	; 0x30
 8000852:	2b01      	cmp	r3, #1
 8000854:	d10e      	bne.n	8000874 <GetUART+0x90>
			{
				HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET );
 8000856:	2201      	movs	r2, #1
 8000858:	2120      	movs	r1, #32
 800085a:	4815      	ldr	r0, [pc, #84]	; (80008b0 <GetUART+0xcc>)
 800085c:	f000 fcc4 	bl	80011e8 <HAL_GPIO_WritePin>
				osDelay(TIME_DELAY_SPH);
 8000860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000864:	f002 f9b6 	bl	8002bd4 <osDelay>
				HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET );
 8000868:	2200      	movs	r2, #0
 800086a:	2120      	movs	r1, #32
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <GetUART+0xcc>)
 800086e:	f000 fcbb 	bl	80011e8 <HAL_GPIO_WritePin>
 8000872:	e00d      	b.n	8000890 <GetUART+0xac>
			}
			else
			{
				HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET );
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <GetUART+0xcc>)
 800087a:	f000 fcb5 	bl	80011e8 <HAL_GPIO_WritePin>
				osDelay(2 * TIME_DELAY_SPH);
 800087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000882:	f002 f9a7 	bl	8002bd4 <osDelay>
				HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET );
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <GetUART+0xcc>)
 800088c:	f000 fcac 	bl	80011e8 <HAL_GPIO_WritePin>
		for (uint8_t	Number_Bits = 0; Number_Bits < 7; Number_Bits ++)
 8000890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000894:	3301      	adds	r3, #1
 8000896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800089a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d9ce      	bls.n	8000840 <GetUART+0x5c>
		ActivTaskNumbe	=	4;
 80008a2:	e7aa      	b.n	80007fa <GetUART+0x16>
 80008a4:	20001c0c 	.word	0x20001c0c
 80008a8:	20000090 	.word	0x20000090
 80008ac:	20001c1c 	.word	0x20001c1c
 80008b0:	40010800 	.word	0x40010800

080008b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c6:	f000 f999 	bl	8000bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_MspInit+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_MspInit+0x68>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_MspInit+0x68>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_MspInit+0x68>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <HAL_MspInit+0x68>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x68>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	210f      	movs	r1, #15
 800091e:	f06f 0001 	mvn.w	r0, #1
 8000922:	f000 fa3c 	bl	8000d9e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_MspInit+0x6c>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_MspInit+0x6c>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010000 	.word	0x40010000

08000954 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART2)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <HAL_USART_MspInit+0x98>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d137      	bne.n	80009e4 <HAL_USART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <HAL_USART_MspInit+0x9c>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <HAL_USART_MspInit+0x9c>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097e:	61d3      	str	r3, [r2, #28]
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_USART_MspInit+0x9c>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_USART_MspInit+0x9c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_USART_MspInit+0x9c>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_USART_MspInit+0x9c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a4:	230c      	movs	r3, #12
 80009a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	480f      	ldr	r0, [pc, #60]	; (80009f4 <HAL_USART_MspInit+0xa0>)
 80009b8:	f000 fa92 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009bc:	2310      	movs	r3, #16
 80009be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <HAL_USART_MspInit+0xa0>)
 80009d0:	f000 fa86 	bl	8000ee0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2105      	movs	r1, #5
 80009d8:	2026      	movs	r0, #38	; 0x26
 80009da:	f000 f9e0 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009de:	2026      	movs	r0, #38	; 0x26
 80009e0:	f000 f9f9 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	2019      	movs	r0, #25
 8000a0e:	f000 f9c6 	bl	8000d9e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a12:	2019      	movs	r0, #25
 8000a14:	f000 f9df 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <HAL_InitTick+0x9c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_InitTick+0x9c>)
 8000a1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_InitTick+0x9c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a30:	f107 0210 	add.w	r2, r7, #16
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f80a 	bl	8001a54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a40:	f000 fff4 	bl	8001a2c <HAL_RCC_GetPCLK2Freq>
 8000a44:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <HAL_InitTick+0xa0>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9b      	lsrs	r3, r3, #18
 8000a50:	3b01      	subs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_InitTick+0xa8>)
 8000a58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a76:	f001 f83b 	bl	8001af0 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d104      	bne.n	8000a8a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a82:	f001 f88d 	bl	8001ba0 <HAL_TIM_Base_Start_IT>
 8000a86:	4603      	mov	r3, r0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	431bde83 	.word	0x431bde83
 8000a9c:	20001c64 	.word	0x20001c64
 8000aa0:	40012c00 	.word	0x40012c00

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM1_UP_IRQHandler+0x10>)
 8000ad6:	f001 f8b5 	bl	8001c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20001c64 	.word	0x20001c64

08000ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <USART2_IRQHandler+0x10>)
 8000aea:	f001 fb21 	bl	8002130 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20001c1c 	.word	0x20001c1c

08000af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	Get_Btn_Task();
 8000afc:	f7ff fb28 	bl	8000150 <Get_Btn_Task>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b04:	f000 fb88 	bl	8001218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f005 f996 	bl	8005e6c <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20005000 	.word	0x20005000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	20000094 	.word	0x20000094
 8000b74:	20001d00 	.word	0x20001d00

08000b78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000baa:	f7ff ffe5 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f005 f963 	bl	8005e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff fae1 	bl	8000178 <main>
  bx lr
 8000bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bc0:	08006210 	.word	0x08006210
  ldr r2, =_sbss
 8000bc4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bc8:	20001d00 	.word	0x20001d00

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x28>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f8d1 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff ff06 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe7a 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20001cac 	.word	0x20001cac

08000c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20001cac 	.word	0x20001cac

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4906      	ldr	r1, [pc, #24]	; (8000ccc <__NVIC_EnableIRQ+0x34>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff4f 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff64 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ffb2 	bl	8000d24 <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff81 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff57 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d005      	beq.n	8000e16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e051      	b.n	8000eba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 020e 	bic.w	r2, r2, #14
 8000e24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_DMA_Abort_IT+0xd0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d029      	beq.n	8000e94 <HAL_DMA_Abort_IT+0xa0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <HAL_DMA_Abort_IT+0xd4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d022      	beq.n	8000e90 <HAL_DMA_Abort_IT+0x9c>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_DMA_Abort_IT+0xd8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d01a      	beq.n	8000e8a <HAL_DMA_Abort_IT+0x96>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_DMA_Abort_IT+0xdc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d012      	beq.n	8000e84 <HAL_DMA_Abort_IT+0x90>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <HAL_DMA_Abort_IT+0xe0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00a      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x8a>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_DMA_Abort_IT+0xe4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d102      	bne.n	8000e78 <HAL_DMA_Abort_IT+0x84>
 8000e72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e76:	e00e      	b.n	8000e96 <HAL_DMA_Abort_IT+0xa2>
 8000e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e7c:	e00b      	b.n	8000e96 <HAL_DMA_Abort_IT+0xa2>
 8000e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e82:	e008      	b.n	8000e96 <HAL_DMA_Abort_IT+0xa2>
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	e005      	b.n	8000e96 <HAL_DMA_Abort_IT+0xa2>
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	e002      	b.n	8000e96 <HAL_DMA_Abort_IT+0xa2>
 8000e90:	2310      	movs	r3, #16
 8000e92:	e000      	b.n	8000e96 <HAL_DMA_Abort_IT+0xa2>
 8000e94:	2301      	movs	r3, #1
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_DMA_Abort_IT+0xe8>)
 8000e98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	4798      	blx	r3
    } 
  }
  return status;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40020008 	.word	0x40020008
 8000ec8:	4002001c 	.word	0x4002001c
 8000ecc:	40020030 	.word	0x40020030
 8000ed0:	40020044 	.word	0x40020044
 8000ed4:	40020058 	.word	0x40020058
 8000ed8:	4002006c 	.word	0x4002006c
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e169      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8158 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a9a      	ldr	r2, [pc, #616]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d05e      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f1c:	4a98      	ldr	r2, [pc, #608]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d875      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f22:	4a98      	ldr	r2, [pc, #608]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d058      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f28:	4a96      	ldr	r2, [pc, #600]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d86f      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f2e:	4a96      	ldr	r2, [pc, #600]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d052      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f34:	4a94      	ldr	r2, [pc, #592]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d869      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f3a:	4a94      	ldr	r2, [pc, #592]	; (800118c <HAL_GPIO_Init+0x2ac>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d04c      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f40:	4a92      	ldr	r2, [pc, #584]	; (800118c <HAL_GPIO_Init+0x2ac>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d863      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f46:	4a92      	ldr	r2, [pc, #584]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d046      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f4c:	4a90      	ldr	r2, [pc, #576]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d85d      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d82a      	bhi.n	8000fac <HAL_GPIO_Init+0xcc>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d859      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <HAL_GPIO_Init+0x80>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fb5 	.word	0x08000fb5
 8000f68:	08000fc7 	.word	0x08000fc7
 8000f6c:	08001009 	.word	0x08001009
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	0800100f 	.word	0x0800100f
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	0800100f 	.word	0x0800100f
 8000f84:	0800100f 	.word	0x0800100f
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	0800100f 	.word	0x0800100f
 8000f94:	0800100f 	.word	0x0800100f
 8000f98:	0800100f 	.word	0x0800100f
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	4a79      	ldr	r2, [pc, #484]	; (8001194 <HAL_GPIO_Init+0x2b4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb2:	e02c      	b.n	800100e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e029      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e024      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e01f      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e01a      	b.n	8001010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e013      	b.n	8001010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	611a      	str	r2, [r3, #16]
          break;
 8000ffa:	e009      	b.n	8001010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	615a      	str	r2, [r3, #20]
          break;
 8001006:	e003      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x130>
          break;
 800100e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d801      	bhi.n	800101a <HAL_GPIO_Init+0x13a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e001      	b.n	800101e <HAL_GPIO_Init+0x13e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d802      	bhi.n	800102c <HAL_GPIO_Init+0x14c>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x152>
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	3b08      	subs	r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	210f      	movs	r1, #15
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	6a39      	ldr	r1, [r7, #32]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80b1 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_GPIO_Init+0x2bc>)
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_GPIO_Init+0x2c0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d013      	beq.n	80010cc <HAL_GPIO_Init+0x1ec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <HAL_GPIO_Init+0x2c4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00d      	beq.n	80010c8 <HAL_GPIO_Init+0x1e8>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3e      	ldr	r2, [pc, #248]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3d      	ldr	r2, [pc, #244]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_GPIO_Init+0x1e0>
 80010bc:	2303      	movs	r3, #3
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010cc:	2300      	movs	r3, #0
 80010ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010de:	492f      	ldr	r1, [pc, #188]	; (800119c <HAL_GPIO_Init+0x2bc>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	492c      	ldr	r1, [pc, #176]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4928      	ldr	r1, [pc, #160]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4922      	ldr	r1, [pc, #136]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	491e      	ldr	r1, [pc, #120]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001138:	4013      	ands	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	4918      	ldr	r1, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4914      	ldr	r1, [pc, #80]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d021      	beq.n	80011b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
 800117c:	e021      	b.n	80011c2 <HAL_GPIO_Init+0x2e2>
 800117e:	bf00      	nop
 8001180:	10320000 	.word	0x10320000
 8001184:	10310000 	.word	0x10310000
 8001188:	10220000 	.word	0x10220000
 800118c:	10210000 	.word	0x10210000
 8001190:	10120000 	.word	0x10120000
 8001194:	10110000 	.word	0x10110000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40011400 	.word	0x40011400
 80011b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4909      	ldr	r1, [pc, #36]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011be:	4013      	ands	r3, r2
 80011c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	3301      	adds	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f ae8e 	bne.w	8000ef4 <HAL_GPIO_Init+0x14>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	372c      	adds	r7, #44	; 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	611a      	str	r2, [r3, #16]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f806 	bl	8001248 <HAL_GPIO_EXTI_Callback>
  }
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e26c      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8087 	beq.w	800138a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800127c:	4b92      	ldr	r3, [pc, #584]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b04      	cmp	r3, #4
 8001286:	d00c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001288:	4b8f      	ldr	r3, [pc, #572]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b08      	cmp	r3, #8
 8001292:	d112      	bne.n	80012ba <HAL_RCC_OscConfig+0x5e>
 8001294:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d10b      	bne.n	80012ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a2:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d06c      	beq.n	8001388 <HAL_RCC_OscConfig+0x12c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d168      	bne.n	8001388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e246      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x76>
 80012c4:	4b80      	ldr	r3, [pc, #512]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a7f      	ldr	r2, [pc, #508]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e02e      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b7b      	ldr	r3, [pc, #492]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a77      	ldr	r2, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0xbc>
 80012fe:	4b72      	ldr	r3, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a71      	ldr	r2, [pc, #452]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6e      	ldr	r2, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 8001318:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a67      	ldr	r2, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc72 	bl	8000c20 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fc6e 	bl	8000c20 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1fa      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xe4>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fc5e 	bl	8000c20 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fc5a 	bl	8000c20 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1e6      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x10c>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x18c>
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x176>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1ba      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4939      	ldr	r1, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	e03a      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc13 	bl	8000c20 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc0f 	bl	8000c20 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e19b      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4927      	ldr	r1, [pc, #156]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fbf2 	bl	8000c20 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fbee 	bl	8000c20 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e17a      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d03a      	beq.n	80014e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d019      	beq.n	80014a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_RCC_OscConfig+0x274>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fbd2 	bl	8000c20 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fbce 	bl	8000c20 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e15a      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 fb08 	bl	8001ab4 <RCC_Delay>
 80014a4:	e01c      	b.n	80014e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_RCC_OscConfig+0x274>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fbb8 	bl	8000c20 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b2:	e00f      	b.n	80014d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fbb4 	bl	8000c20 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d908      	bls.n	80014d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e140      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	42420000 	.word	0x42420000
 80014d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b9e      	ldr	r3, [pc, #632]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e9      	bne.n	80014b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a6 	beq.w	800163a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b97      	ldr	r3, [pc, #604]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10d      	bne.n	800151a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b94      	ldr	r3, [pc, #592]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a93      	ldr	r2, [pc, #588]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b91      	ldr	r3, [pc, #580]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b8e      	ldr	r3, [pc, #568]	; (8001754 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b8b      	ldr	r3, [pc, #556]	; (8001754 <HAL_RCC_OscConfig+0x4f8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a8a      	ldr	r2, [pc, #552]	; (8001754 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fb75 	bl	8000c20 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fb71 	bl	8000c20 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b64      	cmp	r3, #100	; 0x64
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0fd      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b81      	ldr	r3, [pc, #516]	; (8001754 <HAL_RCC_OscConfig+0x4f8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x312>
 8001560:	4b7b      	ldr	r3, [pc, #492]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a7a      	ldr	r2, [pc, #488]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e02d      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x334>
 8001576:	4b76      	ldr	r3, [pc, #472]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a75      	ldr	r2, [pc, #468]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	4b73      	ldr	r3, [pc, #460]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	e01c      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x356>
 8001598:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a6c      	ldr	r2, [pc, #432]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a69      	ldr	r2, [pc, #420]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a66      	ldr	r2, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b64      	ldr	r3, [pc, #400]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a63      	ldr	r2, [pc, #396]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb25 	bl	8000c20 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fb21 	bl	8000c20 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0ab      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ee      	beq.n	80015da <HAL_RCC_OscConfig+0x37e>
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb0f 	bl	8000c20 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb0b 	bl	8000c20 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e095      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a47      	ldr	r2, [pc, #284]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8081 	beq.w	8001746 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001644:	4b42      	ldr	r3, [pc, #264]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d061      	beq.n	8001714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d146      	bne.n	80016e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HAL_RCC_OscConfig+0x4fc>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fadf 	bl	8000c20 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fadb 	bl	8000c20 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e067      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d108      	bne.n	80016a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	492d      	ldr	r1, [pc, #180]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a19      	ldr	r1, [r3, #32]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	430b      	orrs	r3, r1
 80016b2:	4927      	ldr	r1, [pc, #156]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x4fc>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff faaf 	bl	8000c20 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff faab 	bl	8000c20 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e037      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46a>
 80016e4:	e02f      	b.n	8001746 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_RCC_OscConfig+0x4fc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa98 	bl	8000c20 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa94 	bl	8000c20 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e020      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x498>
 8001712:	e018      	b.n	8001746 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e013      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_OscConfig+0x4f4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	429a      	cmp	r2, r3
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	40007000 	.word	0x40007000
 8001758:	42420060 	.word	0x42420060

0800175c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0d0      	b.n	8001912 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b6a      	ldr	r3, [pc, #424]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d910      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 0207 	bic.w	r2, r3, #7
 8001786:	4965      	ldr	r1, [pc, #404]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d040      	beq.n	800187c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d115      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e073      	b.n	8001912 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06b      	b.n	8001912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4936      	ldr	r1, [pc, #216]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800184c:	f7ff f9e8 	bl	8000c20 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff f9e4 	bl	8000c20 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e053      	b.n	8001912 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d210      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0207 	bic.w	r2, r3, #7
 8001892:	4922      	ldr	r1, [pc, #136]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f821 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1cc>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1d0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f874 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40022000 	.word	0x40022000
 8001920:	40021000 	.word	0x40021000
 8001924:	08006190 	.word	0x08006190
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	b490      	push	{r4, r7}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001938:	1d3c      	adds	r4, r7, #4
 800193a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800193c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001940:	f240 2301 	movw	r3, #513	; 0x201
 8001944:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b04      	cmp	r3, #4
 8001968:	d002      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x40>
 800196a:	2b08      	cmp	r3, #8
 800196c:	d003      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x46>
 800196e:	e02d      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001972:	623b      	str	r3, [r7, #32]
      break;
 8001974:	e02d      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001982:	4413      	add	r3, r2
 8001984:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001988:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0c5b      	lsrs	r3, r3, #17
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019a2:	4413      	add	r3, r2
 80019a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ae:	fb02 f203 	mul.w	r2, r2, r3
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e004      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	623b      	str	r3, [r7, #32]
      break;
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ce:	623b      	str	r3, [r7, #32]
      break;
 80019d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d2:	6a3b      	ldr	r3, [r7, #32]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc90      	pop	{r4, r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	08006078 	.word	0x08006078
 80019e4:	40021000 	.word	0x40021000
 80019e8:	007a1200 	.word	0x007a1200
 80019ec:	003d0900 	.word	0x003d0900

080019f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	20000000 	.word	0x20000000

08001a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a08:	f7ff fff2 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	080061a0 	.word	0x080061a0

08001a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0adb      	lsrs	r3, r3, #11
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	080061a0 	.word	0x080061a0

08001a54 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	220f      	movs	r2, #15
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0207 	and.w	r2, r3, #7
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <RCC_Delay+0x34>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <RCC_Delay+0x38>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad0:	bf00      	nop
  }
  while (Delay --);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <RCC_Delay+0x1c>
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e041      	b.n	8001b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f839 	bl	8001b8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f000 f9b4 	bl	8001e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d001      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e03a      	b.n	8001c2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_TIM_Base_Start_IT+0x98>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x58>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d009      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x58>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_TIM_Base_Start_IT+0x9c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x58>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_TIM_Base_Start_IT+0xa0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d010      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1a:	e007      	b.n	8001c2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40012c00 	.word	0x40012c00
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40000800 	.word	0x40000800

08001c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d122      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d11b      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0202 	mvn.w	r2, #2
 8001c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8ed 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8e0 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8ef 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d122      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d11b      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0204 	mvn.w	r2, #4
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8c3 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8b6 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8c5 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0208 	mvn.w	r2, #8
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f899 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f88c 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f89b 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0210 	mvn.w	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2208      	movs	r2, #8
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f86f 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f862 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f871 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0201 	mvn.w	r2, #1
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fd76 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8bf 	bl	8001f72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f835 	bl	8001e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0220 	mvn.w	r2, #32
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f88a 	bl	8001f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <TIM_Base_SetConfig+0xb8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00b      	beq.n	8001ecc <TIM_Base_SetConfig+0x30>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d007      	beq.n	8001ecc <TIM_Base_SetConfig+0x30>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <TIM_Base_SetConfig+0xbc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <TIM_Base_SetConfig+0x30>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a25      	ldr	r2, [pc, #148]	; (8001f5c <TIM_Base_SetConfig+0xc0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d108      	bne.n	8001ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <TIM_Base_SetConfig+0xb8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00b      	beq.n	8001efe <TIM_Base_SetConfig+0x62>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d007      	beq.n	8001efe <TIM_Base_SetConfig+0x62>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <TIM_Base_SetConfig+0xbc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d003      	beq.n	8001efe <TIM_Base_SetConfig+0x62>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <TIM_Base_SetConfig+0xc0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d108      	bne.n	8001f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <TIM_Base_SetConfig+0xb8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d103      	bne.n	8001f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	615a      	str	r2, [r3, #20]
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800

08001f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e033      	b.n	8001ffe <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fcd2 	bl	8000954 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fc03 	bl	80027c4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_USART_Transmit_IT>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	4613      	mov	r3, r2
 8002012:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d130      	bne.n	8002082 <HAL_USART_Transmit_IT+0x7c>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_USART_Transmit_IT+0x26>
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_USART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e029      	b.n	8002084 <HAL_USART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_USART_Transmit_IT+0x38>
 800203a:	2302      	movs	r3, #2
 800203c:	e022      	b.n	8002084 <HAL_USART_Transmit_IT+0x7e>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2212      	movs	r2, #18
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       configured only for transmit "USART_MODE_TX"
       The __HAL_USART_ENABLE_IT(husart, USART_IT_ERR) can be used to enable the Frame error,
       Noise error interrupt */

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the USART Transmit Data Register Empty Interrupt */
    SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_USART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
  }
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <HAL_USART_Receive_IT>:
  * @param  pRxData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size    Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	4613      	mov	r3, r2
 800209a:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d13d      	bne.n	8002124 <HAL_USART_Receive_IT+0x96>
  {
    if ((pRxData == NULL) || (Size == 0))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_USART_Receive_IT+0x26>
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_USART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e036      	b.n	8002126 <HAL_USART_Receive_IT+0x98>
    }
    /* Process Locked */
    __HAL_LOCK(husart);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_USART_Receive_IT+0x38>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e02f      	b.n	8002126 <HAL_USART_Receive_IT+0x98>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pRxBuffPtr = pRxData;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
    husart->RxXferSize = Size;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	88fa      	ldrh	r2, [r7, #6]
 80020d8:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	865a      	strh	r2, [r3, #50]	; 0x32

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_RX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2222      	movs	r2, #34	; 0x22
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the USART Parity Error and Data Register not empty Interrupts */
    SET_BIT(husart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002104:	60da      	str	r2, [r3, #12]

    /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	615a      	str	r2, [r3, #20]

    /* Send dummy byte in order to generate the clock for the slave to send data */
    husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800211e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_USART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d117      	bne.n	8002196 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <HAL_USART_IRQHandler+0x66>
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b22      	cmp	r3, #34	; 0x22
 8002184:	d103      	bne.n	800218e <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9c1 	bl	800250e <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 800218c:	e0e9      	b.n	8002362 <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa43 	bl	800261a <USART_TransmitReceive_IT>
      return;
 8002194:	e0e5      	b.n	8002362 <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80bb 	beq.w	8002314 <HAL_USART_IRQHandler+0x1e4>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_USART_IRQHandler+0x84>
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80b0 	beq.w	8002314 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_USART_IRQHandler+0xa4>
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_USART_IRQHandler+0xc4>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_USART_IRQHandler+0xe4>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00f      	beq.n	800223e <HAL_USART_IRQHandler+0x10e>
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_USART_IRQHandler+0x102>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0208 	orr.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 808c 	beq.w	8002360 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d011      	beq.n	8002276 <HAL_USART_IRQHandler+0x146>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00c      	beq.n	8002276 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b22      	cmp	r3, #34	; 0x22
 8002266:	d103      	bne.n	8002270 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f950 	bl	800250e <USART_Receive_IT>
 800226e:	e002      	b.n	8002276 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f9d2 	bl	800261a <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_USART_IRQHandler+0x16e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d031      	beq.n	8002302 <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f895 	bl	80023ce <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d023      	beq.n	80022fa <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c0:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d013      	beq.n	80022f2 <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_USART_IRQHandler+0x238>)
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fd8c 	bl	8000df4 <HAL_DMA_Abort_IT>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ec:	4610      	mov	r0, r2
 80022ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80022f0:	e00e      	b.n	8002310 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f855 	bl	80023a2 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80022f8:	e00a      	b.n	8002310 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f851 	bl	80023a2 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002300:	e006      	b.n	8002310 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f84d 	bl	80023a2 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800230e:	e027      	b.n	8002360 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002310:	bf00      	nop
    return;
 8002312:	e025      	b.n	8002360 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d012      	beq.n	8002344 <HAL_USART_IRQHandler+0x214>
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b12      	cmp	r3, #18
 8002332:	d103      	bne.n	800233c <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f87b 	bl	8002430 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 800233a:	e012      	b.n	8002362 <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f96c 	bl	800261a <USART_TransmitReceive_IT>
    return;
 8002342:	e00e      	b.n	8002362 <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_USART_IRQHandler+0x232>
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8b8 	bl	80024ce <USART_EndTransmit_IT>
    return;
 800235e:	e000      	b.n	8002362 <HAL_USART_IRQHandler+0x232>
    return;
 8002360:	bf00      	nop
  }
}
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	08002409 	.word	0x08002409

0800236c <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_USART_GetState>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL state
  */
HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return husart->State;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c2:	b2db      	uxtb	r3, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff ffbd 	bl	80023a2 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b12      	cmp	r3, #18
 8002442:	d13e      	bne.n	80024c2 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	d114      	bne.n	8002478 <USART_Transmit_IT+0x48>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d110      	bne.n	8002478 <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800246a:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	1c9a      	adds	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
 8002476:	e008      	b.n	800248a <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c59      	adds	r1, r3, #1
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6251      	str	r1, [r2, #36]	; 0x24
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4619      	mov	r1, r3
 8002498:	8551      	strh	r1, [r2, #42]	; 0x2a
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ac:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff34 	bl	800236c <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b22      	cmp	r3, #34	; 0x22
 8002520:	d176      	bne.n	8002610 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252a:	d117      	bne.n	800255c <USART_Receive_IT+0x4e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d113      	bne.n	800255c <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	b29b      	uxth	r3, r3
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	b29a      	uxth	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	1c9a      	adds	r2, r3, #2
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
 800255a:	e026      	b.n	80025aa <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256e:	d007      	beq.n	8002580 <USART_Receive_IT+0x72>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <USART_Receive_IT+0x80>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	e008      	b.n	80025a0 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d120      	bne.n	8002604 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0220 	bic.w	r2, r2, #32
 80025d0:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e0:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff febf 	bl	800237e <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e006      	b.n	8002612 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	22ff      	movs	r2, #255	; 0xff
 800260a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b32      	cmp	r3, #50	; 0x32
 800262c:	f040 80c4 	bne.w	80027b8 <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03f      	beq.n	80026ba <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d138      	bne.n	80026ba <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002650:	d116      	bne.n	8002680 <USART_TransmitReceive_IT+0x66>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d112      	bne.n	8002680 <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002672:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1c9a      	adds	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24
 800267e:	e008      	b.n	8002692 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c59      	adds	r1, r3, #1
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6251      	str	r1, [r2, #36]	; 0x24
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b8:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d051      	beq.n	8002768 <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d14a      	bne.n	8002768 <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	d117      	bne.n	800270c <USART_TransmitReceive_IT+0xf2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d113      	bne.n	800270c <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	1c9a      	adds	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
 800270a:	e026      	b.n	800275a <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271e:	d007      	beq.n	8002730 <USART_TransmitReceive_IT+0x116>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <USART_TransmitReceive_IT+0x124>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e008      	b.n	8002750 <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d120      	bne.n	80027b4 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0220 	bic.w	r2, r2, #32
 8002780:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002790:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fdf0 	bl	8002390 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e002      	b.n	80027ba <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020c 	bic.w	r2, r2, #12
 80027de:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027ee:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80027f8:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800280e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002826:	f023 030c 	bic.w	r3, r3, #12
 800282a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002858:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a53      	ldr	r2, [pc, #332]	; (80029ac <USART_SetConfig+0x1e8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d14f      	bne.n	8002904 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002864:	f7ff f8e2 	bl	8001a2c <HAL_RCC_GetPCLK2Freq>
 8002868:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009a      	lsls	r2, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	4a4b      	ldr	r2, [pc, #300]	; (80029b0 <USART_SetConfig+0x1ec>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	0119      	lsls	r1, r3, #4
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a0:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <USART_SetConfig+0x1ec>)
 80028a2:	fba3 0302 	umull	r0, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2064      	movs	r0, #100	; 0x64
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a3e      	ldr	r2, [pc, #248]	; (80029b0 <USART_SetConfig+0x1ec>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80028c2:	4419      	add	r1, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	009a      	lsls	r2, r3, #2
 80028ce:	441a      	add	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <USART_SetConfig+0x1ec>)
 80028dc:	fba3 0302 	umull	r0, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	2064      	movs	r0, #100	; 0x64
 80028e4:	fb00 f303 	mul.w	r3, r0, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	4a30      	ldr	r2, [pc, #192]	; (80029b0 <USART_SetConfig+0x1ec>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	440a      	add	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8002902:	e04e      	b.n	80029a2 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff f87e 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8002908:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <USART_SetConfig+0x1ec>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	0119      	lsls	r1, r3, #4
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	009a      	lsls	r2, r3, #2
 8002934:	441a      	add	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <USART_SetConfig+0x1ec>)
 8002942:	fba3 0302 	umull	r0, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2064      	movs	r0, #100	; 0x64
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a16      	ldr	r2, [pc, #88]	; (80029b0 <USART_SetConfig+0x1ec>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8002962:	4419      	add	r1, r3
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009a      	lsls	r2, r3, #2
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	fbb2 f2f3 	udiv	r2, r2, r3
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <USART_SetConfig+0x1ec>)
 800297c:	fba3 0302 	umull	r0, r3, r3, r2
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	2064      	movs	r0, #100	; 0x64
 8002984:	fb00 f303 	mul.w	r3, r0, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	3332      	adds	r3, #50	; 0x32
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <USART_SetConfig+0x1ec>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	440a      	add	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40013800 	.word	0x40013800
 80029b0:	51eb851f 	.word	0x51eb851f

080029b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ba:	f3ef 8305 	mrs	r3, IPSR
 80029be:	60bb      	str	r3, [r7, #8]
  return(result);
 80029c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ca:	607b      	str	r3, [r7, #4]
  return(result);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <osKernelInitialize+0x32>
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <osKernelInitialize+0x60>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d109      	bne.n	80029ee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029da:	f3ef 8311 	mrs	r3, BASEPRI
 80029de:	603b      	str	r3, [r7, #0]
  return(result);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029e6:	f06f 0305 	mvn.w	r3, #5
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e00c      	b.n	8002a08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <osKernelInitialize+0x60>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <osKernelInitialize+0x60>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e002      	b.n	8002a08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000098 	.word	0x20000098

08002a18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a1e:	f3ef 8305 	mrs	r3, IPSR
 8002a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <osKernelStart+0x32>
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <osKernelStart+0x64>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d109      	bne.n	8002a52 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8002a42:	603b      	str	r3, [r7, #0]
  return(result);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a4a:	f06f 0305 	mvn.w	r3, #5
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e00e      	b.n	8002a70 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <osKernelStart+0x64>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <osKernelStart+0x64>)
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a60:	f001 fd40 	bl	80044e4 <vTaskStartScheduler>
      stat = osOK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e002      	b.n	8002a70 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a70:	68fb      	ldr	r3, [r7, #12]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000098 	.word	0x20000098

08002a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b092      	sub	sp, #72	; 0x48
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a90:	f3ef 8305 	mrs	r3, IPSR
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 8094 	bne.w	8002bc6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa2:	623b      	str	r3, [r7, #32]
  return(result);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 808d 	bne.w	8002bc6 <osThreadNew+0x146>
 8002aac:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <osThreadNew+0x150>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d106      	bne.n	8002ac2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 8082 	bne.w	8002bc6 <osThreadNew+0x146>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d07e      	beq.n	8002bc6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002acc:	2318      	movs	r3, #24
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002ad4:	f107 031b 	add.w	r3, r7, #27
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d045      	beq.n	8002b72 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <osThreadNew+0x74>
        name = attr->name;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <osThreadNew+0x9a>
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	2b38      	cmp	r3, #56	; 0x38
 8002b0c:	d805      	bhi.n	8002b1a <osThreadNew+0x9a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <osThreadNew+0x9e>
        return (NULL);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e054      	b.n	8002bc8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <osThreadNew+0xd4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2bbb      	cmp	r3, #187	; 0xbb
 8002b3c:	d90a      	bls.n	8002b54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <osThreadNew+0xd4>
        mem = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b52:	e010      	b.n	8002b76 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10c      	bne.n	8002b76 <osThreadNew+0xf6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <osThreadNew+0xf6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d104      	bne.n	8002b76 <osThreadNew+0xf6>
          mem = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b70:	e001      	b.n	8002b76 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d110      	bne.n	8002b9e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b84:	9202      	str	r2, [sp, #8]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f001 fac2 	bl	800411c <xTaskCreateStatic>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e013      	b.n	8002bc6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d110      	bne.n	8002bc6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f001 fb0c 	bl	80041d4 <xTaskCreate>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <osThreadNew+0x146>
          hTask = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002bc6:	697b      	ldr	r3, [r7, #20]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3738      	adds	r7, #56	; 0x38
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000098 	.word	0x20000098

08002bd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bdc:	f3ef 8305 	mrs	r3, IPSR
 8002be0:	613b      	str	r3, [r7, #16]
  return(result);
 8002be2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <osDelay+0x34>
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <osDelay+0x58>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d109      	bne.n	8002c10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8002c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <osDelay+0x3c>
    stat = osErrorISR;
 8002c08:	f06f 0305 	mvn.w	r3, #5
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e007      	b.n	8002c20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 fc2e 	bl	800447c <vTaskDelay>
    }
  }

  return (stat);
 8002c20:	697b      	ldr	r3, [r7, #20]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000098 	.word	0x20000098

08002c30 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c3c:	f3ef 8305 	mrs	r3, IPSR
 8002c40:	613b      	str	r3, [r7, #16]
  return(result);
 8002c42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 8085 	bne.w	8002d54 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d17e      	bne.n	8002d54 <osMutexNew+0x124>
 8002c56:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <osMutexNew+0x130>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d105      	bne.n	8002c6a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d174      	bne.n	8002d54 <osMutexNew+0x124>
    if (attr != NULL) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	e001      	b.n	8002c7c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <osMutexNew+0x5c>
      rmtx = 1U;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e001      	b.n	8002c90 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d15c      	bne.n	8002d54 <osMutexNew+0x124>
      mem = -1;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <osMutexNew+0x8c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b4f      	cmp	r3, #79	; 0x4f
 8002cb4:	d902      	bls.n	8002cbc <osMutexNew+0x8c>
          mem = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e00c      	b.n	8002cd6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d108      	bne.n	8002cd6 <osMutexNew+0xa6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <osMutexNew+0xa6>
            mem = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	e001      	b.n	8002cd6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d112      	bne.n	8002d02 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	2004      	movs	r0, #4
 8002cea:	f000 fbb1 	bl	8003450 <xQueueCreateMutexStatic>
 8002cee:	6278      	str	r0, [r7, #36]	; 0x24
 8002cf0:	e016      	b.n	8002d20 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f000 fba9 	bl	8003450 <xQueueCreateMutexStatic>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24
 8002d00:	e00e      	b.n	8002d20 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8002d0e:	2004      	movs	r0, #4
 8002d10:	f000 fb86 	bl	8003420 <xQueueCreateMutex>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24
 8002d16:	e003      	b.n	8002d20 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f000 fb81 	bl	8003420 <xQueueCreateMutex>
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <osMutexNew+0x110>
        if (attr != NULL) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <osMutexNew+0x104>
          name = attr->name;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e001      	b.n	8002d38 <osMutexNew+0x108>
        } else {
          name = NULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d3c:	f001 f968 	bl	8004010 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <osMutexNew+0x124>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3728      	adds	r7, #40	; 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000098 	.word	0x20000098

08002d64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d74:	f3ef 8305 	mrs	r3, IPSR
 8002d78:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f040 8086 	bne.w	8002e8e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d82:	f3ef 8310 	mrs	r3, PRIMASK
 8002d86:	617b      	str	r3, [r7, #20]
  return(result);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d17f      	bne.n	8002e8e <osSemaphoreNew+0x12a>
 8002d8e:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <osSemaphoreNew+0x134>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d105      	bne.n	8002da2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d96:	f3ef 8311 	mrs	r3, BASEPRI
 8002d9a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d175      	bne.n	8002e8e <osSemaphoreNew+0x12a>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d072      	beq.n	8002e8e <osSemaphoreNew+0x12a>
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d86e      	bhi.n	8002e8e <osSemaphoreNew+0x12a>
    mem = -1;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <osSemaphoreNew+0x6e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8002dca:	d902      	bls.n	8002dd2 <osSemaphoreNew+0x6e>
        mem = 1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	e00c      	b.n	8002dec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <osSemaphoreNew+0x88>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <osSemaphoreNew+0x88>
          mem = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	e001      	b.n	8002dec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d04c      	beq.n	8002e8e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d128      	bne.n	8002e4c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10a      	bne.n	8002e16 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2203      	movs	r2, #3
 8002e06:	9200      	str	r2, [sp, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f000 fa15 	bl	800323c <xQueueGenericCreateStatic>
 8002e12:	6278      	str	r0, [r7, #36]	; 0x24
 8002e14:	e005      	b.n	8002e22 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002e16:	2203      	movs	r2, #3
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f000 fa85 	bl	800332a <xQueueGenericCreate>
 8002e20:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d022      	beq.n	8002e6e <osSemaphoreNew+0x10a>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01f      	beq.n	8002e6e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e36:	f000 fb91 	bl	800355c <xQueueGenericSend>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d016      	beq.n	8002e6e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8002e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e42:	f000 ff9b 	bl	8003d7c <vQueueDelete>
            hSemaphore = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	e010      	b.n	8002e6e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fb13 	bl	8003486 <xQueueCreateCountingSemaphoreStatic>
 8002e60:	6278      	str	r0, [r7, #36]	; 0x24
 8002e62:	e004      	b.n	8002e6e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fb44 	bl	80034f4 <xQueueCreateCountingSemaphore>
 8002e6c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <osSemaphoreNew+0x11e>
          name = attr->name;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	e001      	b.n	8002e86 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002e86:	69f9      	ldr	r1, [r7, #28]
 8002e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e8a:	f001 f8c1 	bl	8004010 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000098 	.word	0x20000098

08002e9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eac:	f3ef 8305 	mrs	r3, IPSR
 8002eb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d16f      	bne.n	8002f98 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d169      	bne.n	8002f98 <osMessageQueueNew+0xfc>
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <osMessageQueueNew+0x108>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d105      	bne.n	8002ed8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ed0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d15f      	bne.n	8002f98 <osMessageQueueNew+0xfc>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d05c      	beq.n	8002f98 <osMessageQueueNew+0xfc>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d059      	beq.n	8002f98 <osMessageQueueNew+0xfc>
    mem = -1;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d029      	beq.n	8002f44 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <osMessageQueueNew+0x82>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b4f      	cmp	r3, #79	; 0x4f
 8002efe:	d90e      	bls.n	8002f1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d302      	bcc.n	8002f1e <osMessageQueueNew+0x82>
        mem = 1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	e014      	b.n	8002f48 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d110      	bne.n	8002f48 <osMessageQueueNew+0xac>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <osMessageQueueNew+0xac>
          mem = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	e001      	b.n	8002f48 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10b      	bne.n	8002f66 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2100      	movs	r1, #0
 8002f58:	9100      	str	r1, [sp, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f96d 	bl	800323c <xQueueGenericCreateStatic>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24
 8002f64:	e008      	b.n	8002f78 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f9da 	bl	800332a <xQueueGenericCreate>
 8002f76:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e001      	b.n	8002f90 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002f90:	69f9      	ldr	r1, [r7, #28]
 8002f92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f94:	f001 f83c 	bl	8004010 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3728      	adds	r7, #40	; 0x28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000098 	.word	0x20000098

08002fa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a06      	ldr	r2, [pc, #24]	; (8002fd0 <vApplicationGetIdleTaskMemory+0x28>)
 8002fb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	2000009c 	.word	0x2000009c
 8002fd4:	20000158 	.word	0x20000158

08002fd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a06      	ldr	r2, [pc, #24]	; (8003008 <vApplicationGetTimerTaskMemory+0x30>)
 8002fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000358 	.word	0x20000358
 8003008:	20000414 	.word	0x20000414

0800300c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f103 0208 	add.w	r2, r3, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f103 0208 	add.w	r2, r3, #8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f103 0208 	add.w	r2, r3, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d103      	bne.n	80030c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e00c      	b.n	80030e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3308      	adds	r3, #8
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e002      	b.n	80030d6 <vListInsert+0x2e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d2f6      	bcs.n	80030d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6892      	ldr	r2, [r2, #8]
 800312e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6852      	ldr	r2, [r2, #4]
 8003138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	429a      	cmp	r2, r3
 8003142:	d103      	bne.n	800314c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
	...

0800316c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003196:	f002 fb91 	bl	80058bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	3b01      	subs	r3, #1
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	441a      	add	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	22ff      	movs	r2, #255	; 0xff
 80031e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d114      	bne.n	8003216 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01a      	beq.n	800322a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3310      	adds	r3, #16
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fc0f 	bl	8004a1c <xTaskRemoveFromEventList>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d012      	beq.n	800322a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <xQueueGenericReset+0xcc>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	e009      	b.n	800322a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3310      	adds	r3, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fef6 	bl	800300c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fef1 	bl	800300c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800322a:	f002 fb77 	bl	800591c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800322e:	2301      	movs	r3, #1
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	; 0x38
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <xQueueGenericCreateStatic+0x52>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <xQueueGenericCreateStatic+0x56>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <xQueueGenericCreateStatic+0x58>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	623b      	str	r3, [r7, #32]
}
 80032aa:	bf00      	nop
 80032ac:	e7fe      	b.n	80032ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <xQueueGenericCreateStatic+0x7e>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <xQueueGenericCreateStatic+0x82>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <xQueueGenericCreateStatic+0x84>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	61fb      	str	r3, [r7, #28]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032da:	2350      	movs	r3, #80	; 0x50
 80032dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b50      	cmp	r3, #80	; 0x50
 80032e2:	d00a      	beq.n	80032fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	61bb      	str	r3, [r7, #24]
}
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800330c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f843 	bl	80033a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003322:	4618      	mov	r0, r3
 8003324:	3730      	adds	r7, #48	; 0x30
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800332a:	b580      	push	{r7, lr}
 800332c:	b08a      	sub	sp, #40	; 0x28
 800332e:	af02      	add	r7, sp, #8
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	4613      	mov	r3, r2
 8003336:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <xQueueGenericCreate+0x2a>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	613b      	str	r3, [r7, #16]
}
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e004      	b.n	800336a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3350      	adds	r3, #80	; 0x50
 800336e:	4618      	mov	r0, r3
 8003370:	f002 fba4 	bl	8005abc <pvPortMalloc>
 8003374:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00f      	beq.n	800339c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	3350      	adds	r3, #80	; 0x50
 8003380:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800338a:	79fa      	ldrb	r2, [r7, #7]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f805 	bl	80033a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800339c:	69bb      	ldr	r3, [r7, #24]
	}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e002      	b.n	80033c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033d4:	2101      	movs	r1, #1
 80033d6:	69b8      	ldr	r0, [r7, #24]
 80033d8:	f7ff fec8 	bl	800316c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800340c:	2300      	movs	r3, #0
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8a2 	bl	800355c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800342a:	2301      	movs	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	461a      	mov	r2, r3
 8003436:	6939      	ldr	r1, [r7, #16]
 8003438:	6978      	ldr	r0, [r7, #20]
 800343a:	f7ff ff76 	bl	800332a <xQueueGenericCreate>
 800343e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff ffd3 	bl	80033ec <prvInitialiseMutex>

		return pxNewQueue;
 8003446:	68fb      	ldr	r3, [r7, #12]
	}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af02      	add	r7, sp, #8
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800345c:	2301      	movs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	6939      	ldr	r1, [r7, #16]
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f7ff fee4 	bl	800323c <xQueueGenericCreateStatic>
 8003474:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff ffb8 	bl	80033ec <prvInitialiseMutex>

		return pxNewQueue;
 800347c:	68fb      	ldr	r3, [r7, #12]
	}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003486:	b580      	push	{r7, lr}
 8003488:	b08a      	sub	sp, #40	; 0x28
 800348a:	af02      	add	r7, sp, #8
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	61bb      	str	r3, [r7, #24]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d90a      	bls.n	80034cc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	617b      	str	r3, [r7, #20]
}
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80034cc:	2302      	movs	r3, #2
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff feb0 	bl	800323c <xQueueGenericCreateStatic>
 80034dc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80034ea:	69fb      	ldr	r3, [r7, #28]
	}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	613b      	str	r3, [r7, #16]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d90a      	bls.n	8003538 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	60fb      	str	r3, [r7, #12]
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003538:	2202      	movs	r2, #2
 800353a:	2100      	movs	r1, #0
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fef4 	bl	800332a <xQueueGenericCreate>
 8003542:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003550:	697b      	ldr	r3, [r7, #20]
	}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08e      	sub	sp, #56	; 0x38
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800356a:	2300      	movs	r3, #0
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xQueueGenericSend+0x32>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <xQueueGenericSend+0x40>
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <xQueueGenericSend+0x44>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <xQueueGenericSend+0x46>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <xQueueGenericSend+0x60>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d103      	bne.n	80035ca <xQueueGenericSend+0x6e>
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <xQueueGenericSend+0x72>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <xQueueGenericSend+0x74>
 80035ce:	2300      	movs	r3, #0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xQueueGenericSend+0x8e>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	623b      	str	r3, [r7, #32]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035ea:	f001 fb7b 	bl	8004ce4 <xTaskGetSchedulerState>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <xQueueGenericSend+0x9e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSend+0xa2>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSend+0xa4>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericSend+0xbe>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	61fb      	str	r3, [r7, #28]
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800361a:	f002 f94f 	bl	80058bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <xQueueGenericSend+0xd4>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d129      	bne.n	8003684 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003636:	f000 fbdb 	bl	8003df0 <prvCopyDataToQueue>
 800363a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	3324      	adds	r3, #36	; 0x24
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f9e7 	bl	8004a1c <xTaskRemoveFromEventList>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003654:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <xQueueGenericSend+0x1f8>)
 8003656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	e00a      	b.n	800367c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <xQueueGenericSend+0x1f8>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800367c:	f002 f94e 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8003680:	2301      	movs	r3, #1
 8003682:	e063      	b.n	800374c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800368a:	f002 f947 	bl	800591c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800368e:	2300      	movs	r3, #0
 8003690:	e05c      	b.n	800374c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fa21 	bl	8004ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036a2:	2301      	movs	r3, #1
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036a6:	f002 f939 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036aa:	f000 ff8b 	bl	80045c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ae:	f002 f905 	bl	80058bc <vPortEnterCritical>
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d103      	bne.n	80036c8 <xQueueGenericSend+0x16c>
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d103      	bne.n	80036de <xQueueGenericSend+0x182>
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036de:	f002 f91d 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036e2:	1d3a      	adds	r2, r7, #4
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fa10 	bl	8004b10 <xTaskCheckForTimeOut>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d124      	bne.n	8003740 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036f8:	f000 fc72 	bl	8003fe0 <prvIsQueueFull>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d018      	beq.n	8003734 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	3310      	adds	r3, #16
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f936 	bl	800497c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003712:	f000 fbfd 	bl	8003f10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003716:	f000 ff63 	bl	80045e0 <xTaskResumeAll>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f af7c 	bne.w	800361a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <xQueueGenericSend+0x1f8>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	e772      	b.n	800361a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003736:	f000 fbeb 	bl	8003f10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800373a:	f000 ff51 	bl	80045e0 <xTaskResumeAll>
 800373e:	e76c      	b.n	800361a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003742:	f000 fbe5 	bl	8003f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003746:	f000 ff4b 	bl	80045e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800374a:	2300      	movs	r3, #0
		}
	}
}
 800374c:	4618      	mov	r0, r3
 800374e:	3738      	adds	r7, #56	; 0x38
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <xQueueGenericSendFromISR+0x3c>
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <xQueueGenericSendFromISR+0x40>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <xQueueGenericSendFromISR+0x42>
 8003798:	2300      	movs	r3, #0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	623b      	str	r3, [r7, #32]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d103      	bne.n	80037c2 <xQueueGenericSendFromISR+0x6a>
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <xQueueGenericSendFromISR+0x6e>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueGenericSendFromISR+0x70>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61fb      	str	r3, [r7, #28]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037e2:	f002 f92d 	bl	8005a40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037e6:	f3ef 8211 	mrs	r2, BASEPRI
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	61ba      	str	r2, [r7, #24]
 80037fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <xQueueGenericSendFromISR+0xbc>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d12c      	bne.n	800386e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003824:	f000 fae4 	bl	8003df0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003828:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d112      	bne.n	8003858 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	3324      	adds	r3, #36	; 0x24
 800383e:	4618      	mov	r0, r3
 8003840:	f001 f8ec 	bl	8004a1c <xTaskRemoveFromEventList>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e007      	b.n	8003868 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800385c:	3301      	adds	r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	b25a      	sxtb	r2, r3
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003868:	2301      	movs	r3, #1
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800386c:	e001      	b.n	8003872 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800387c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003880:	4618      	mov	r0, r3
 8003882:	3738      	adds	r7, #56	; 0x38
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08e      	sub	sp, #56	; 0x38
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	623b      	str	r3, [r7, #32]
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	61fb      	str	r3, [r7, #28]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d103      	bne.n	80038e0 <xQueueGiveFromISR+0x58>
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <xQueueGiveFromISR+0x5c>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <xQueueGiveFromISR+0x5e>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <xQueueGiveFromISR+0x78>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	61bb      	str	r3, [r7, #24]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003900:	f002 f89e 	bl	8005a40 <vPortValidateInterruptPriority>
	__asm volatile
 8003904:	f3ef 8211 	mrs	r2, BASEPRI
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	617a      	str	r2, [r7, #20]
 800391a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800391c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392c:	429a      	cmp	r2, r3
 800392e:	d22b      	bcs.n	8003988 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003942:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d112      	bne.n	8003972 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d016      	beq.n	8003982 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	4618      	mov	r0, r3
 800395a:	f001 f85f 	bl	8004a1c <xTaskRemoveFromEventList>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e007      	b.n	8003982 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003976:	3301      	adds	r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	b25a      	sxtb	r2, r3
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003982:	2301      	movs	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	e001      	b.n	800398c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003988:	2300      	movs	r3, #0
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f383 8811 	msr	BASEPRI, r3
}
 8003996:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800399a:	4618      	mov	r0, r3
 800399c:	3738      	adds	r7, #56	; 0x38
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <xQueueReceive+0x30>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	623b      	str	r3, [r7, #32]
}
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d103      	bne.n	80039e2 <xQueueReceive+0x3e>
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <xQueueReceive+0x42>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <xQueueReceive+0x44>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <xQueueReceive+0x5e>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	61fb      	str	r3, [r7, #28]
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a02:	f001 f96f 	bl	8004ce4 <xTaskGetSchedulerState>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <xQueueReceive+0x6e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <xQueueReceive+0x72>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <xQueueReceive+0x74>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <xQueueReceive+0x8e>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	61bb      	str	r3, [r7, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a32:	f001 ff43 	bl	80058bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01f      	beq.n	8003a82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a46:	f000 fa3d 	bl	8003ec4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00f      	beq.n	8003a7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 ffdc 	bl	8004a1c <xTaskRemoveFromEventList>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <xQueueReceive+0x1bc>)
 8003a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a7a:	f001 ff4f 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e069      	b.n	8003b56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d103      	bne.n	8003a90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a88:	f001 ff48 	bl	800591c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e062      	b.n	8003b56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a96:	f107 0310 	add.w	r3, r7, #16
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 f822 	bl	8004ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aa4:	f001 ff3a 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa8:	f000 fd8c 	bl	80045c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aac:	f001 ff06 	bl	80058bc <vPortEnterCritical>
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d103      	bne.n	8003ac6 <xQueueReceive+0x122>
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d103      	bne.n	8003adc <xQueueReceive+0x138>
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003adc:	f001 ff1e 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ae0:	1d3a      	adds	r2, r7, #4
 8003ae2:	f107 0310 	add.w	r3, r7, #16
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f811 	bl	8004b10 <xTaskCheckForTimeOut>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d123      	bne.n	8003b3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af6:	f000 fa5d 	bl	8003fb4 <prvIsQueueEmpty>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d017      	beq.n	8003b30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	3324      	adds	r3, #36	; 0x24
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 ff37 	bl	800497c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b10:	f000 f9fe 	bl	8003f10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b14:	f000 fd64 	bl	80045e0 <xTaskResumeAll>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d189      	bne.n	8003a32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <xQueueReceive+0x1bc>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	e780      	b.n	8003a32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b32:	f000 f9ed 	bl	8003f10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b36:	f000 fd53 	bl	80045e0 <xTaskResumeAll>
 8003b3a:	e77a      	b.n	8003a32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b3e:	f000 f9e7 	bl	8003f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b42:	f000 fd4d 	bl	80045e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b48:	f000 fa34 	bl	8003fb4 <prvIsQueueEmpty>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f43f af6f 	beq.w	8003a32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3730      	adds	r7, #48	; 0x30
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	623b      	str	r3, [r7, #32]
}
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	61fb      	str	r3, [r7, #28]
}
 8003bb0:	bf00      	nop
 8003bb2:	e7fe      	b.n	8003bb2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bb4:	f001 f896 	bl	8004ce4 <xTaskGetSchedulerState>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <xQueueSemaphoreTake+0x60>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <xQueueSemaphoreTake+0x64>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <xQueueSemaphoreTake+0x66>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	61bb      	str	r3, [r7, #24]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003be4:	f001 fe6a 	bl	80058bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d024      	beq.n	8003c3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	1e5a      	subs	r2, r3, #1
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003c04:	f001 f9ee 	bl	8004fe4 <pvTaskIncrementMutexHeldCount>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00f      	beq.n	8003c36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	3310      	adds	r3, #16
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fefe 	bl	8004a1c <xTaskRemoveFromEventList>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c26:	4b54      	ldr	r3, [pc, #336]	; (8003d78 <xQueueSemaphoreTake+0x214>)
 8003c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c36:	f001 fe71 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e097      	b.n	8003d6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	617b      	str	r3, [r7, #20]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c60:	f001 fe5c 	bl	800591c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e082      	b.n	8003d6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c6e:	f107 030c 	add.w	r3, r7, #12
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ff36 	bl	8004ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c7c:	f001 fe4e 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c80:	f000 fca0 	bl	80045c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c84:	f001 fe1a 	bl	80058bc <vPortEnterCritical>
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d103      	bne.n	8003c9e <xQueueSemaphoreTake+0x13a>
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d103      	bne.n	8003cb4 <xQueueSemaphoreTake+0x150>
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb4:	f001 fe32 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cb8:	463a      	mov	r2, r7
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 ff25 	bl	8004b10 <xTaskCheckForTimeOut>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d132      	bne.n	8003d32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cce:	f000 f971 	bl	8003fb4 <prvIsQueueEmpty>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d026      	beq.n	8003d26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ce0:	f001 fdec 	bl	80058bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f819 	bl	8004d20 <xTaskPriorityInherit>
 8003cee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003cf0:	f001 fe14 	bl	800591c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	3324      	adds	r3, #36	; 0x24
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fe3d 	bl	800497c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d04:	f000 f904 	bl	8003f10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d08:	f000 fc6a 	bl	80045e0 <xTaskResumeAll>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f af68 	bne.w	8003be4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003d14:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <xQueueSemaphoreTake+0x214>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	e75e      	b.n	8003be4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d28:	f000 f8f2 	bl	8003f10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d2c:	f000 fc58 	bl	80045e0 <xTaskResumeAll>
 8003d30:	e758      	b.n	8003be4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d34:	f000 f8ec 	bl	8003f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d38:	f000 fc52 	bl	80045e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d3e:	f000 f939 	bl	8003fb4 <prvIsQueueEmpty>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f43f af4d 	beq.w	8003be4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003d50:	f001 fdb4 	bl	80058bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d56:	f000 f834 	bl	8003dc2 <prvGetDisinheritPriorityAfterTimeout>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 f8b8 	bl	8004ed8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d68:	f001 fdd8 	bl	800591c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3738      	adds	r7, #56	; 0x38
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <vQueueDelete+0x28>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60bb      	str	r3, [r7, #8]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f95b 	bl	8004060 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f001 ff45 	bl	8005c44 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e001      	b.n	8003de4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003de4:	68fb      	ldr	r3, [r7, #12]
	}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d14d      	bne.n	8003eb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 ffee 	bl	8004dfc <xTaskPriorityDisinherit>
 8003e20:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	e043      	b.n	8003eb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d119      	bne.n	8003e64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6898      	ldr	r0, [r3, #8]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	f002 f84a 	bl	8005ed4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	441a      	add	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d32b      	bcc.n	8003eb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	e026      	b.n	8003eb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	68d8      	ldr	r0, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	f002 f830 	bl	8005ed4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	441a      	add	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d207      	bcs.n	8003ea0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	425b      	negs	r3, r3
 8003e9a:	441a      	add	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d105      	bne.n	8003eb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003eba:	697b      	ldr	r3, [r7, #20]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d018      	beq.n	8003f08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	441a      	add	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d303      	bcc.n	8003ef8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68d9      	ldr	r1, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	461a      	mov	r2, r3
 8003f02:	6838      	ldr	r0, [r7, #0]
 8003f04:	f001 ffe6 	bl	8005ed4 <memcpy>
	}
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f18:	f001 fcd0 	bl	80058bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f24:	e011      	b.n	8003f4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3324      	adds	r3, #36	; 0x24
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fd72 	bl	8004a1c <xTaskRemoveFromEventList>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f3e:	f000 fe49 	bl	8004bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	dce9      	bgt.n	8003f26 <prvUnlockQueue+0x16>
 8003f52:	e000      	b.n	8003f56 <prvUnlockQueue+0x46>
					break;
 8003f54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f5e:	f001 fcdd 	bl	800591c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f62:	f001 fcab 	bl	80058bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f6e:	e011      	b.n	8003f94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d012      	beq.n	8003f9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fd4d 	bl	8004a1c <xTaskRemoveFromEventList>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f88:	f000 fe24 	bl	8004bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f8c:	7bbb      	ldrb	r3, [r7, #14]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	dce9      	bgt.n	8003f70 <prvUnlockQueue+0x60>
 8003f9c:	e000      	b.n	8003fa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	22ff      	movs	r2, #255	; 0xff
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fa8:	f001 fcb8 	bl	800591c <vPortExitCritical>
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fbc:	f001 fc7e 	bl	80058bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e001      	b.n	8003fd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fd2:	f001 fca3 	bl	800591c <vPortExitCritical>

	return xReturn;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fe8:	f001 fc68 	bl	80058bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d102      	bne.n	8003ffe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e001      	b.n	8004002 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004002:	f001 fc8b 	bl	800591c <vPortExitCritical>

	return xReturn;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e014      	b.n	800404a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004020:	4a0e      	ldr	r2, [pc, #56]	; (800405c <vQueueAddToRegistry+0x4c>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800402c:	490b      	ldr	r1, [pc, #44]	; (800405c <vQueueAddToRegistry+0x4c>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <vQueueAddToRegistry+0x4c>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004042:	e006      	b.n	8004052 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b07      	cmp	r3, #7
 800404e:	d9e7      	bls.n	8004020 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	20001cb0 	.word	0x20001cb0

08004060 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e016      	b.n	800409c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <vQueueUnregisterQueue+0x50>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d10b      	bne.n	8004096 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800407e:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <vQueueUnregisterQueue+0x50>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2100      	movs	r1, #0
 8004084:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <vQueueUnregisterQueue+0x50>)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	2200      	movs	r2, #0
 8004092:	605a      	str	r2, [r3, #4]
				break;
 8004094:	e006      	b.n	80040a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b07      	cmp	r3, #7
 80040a0:	d9e5      	bls.n	800406e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20001cb0 	.word	0x20001cb0

080040b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040c4:	f001 fbfa 	bl	80058bc <vPortEnterCritical>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ce:	b25b      	sxtb	r3, r3
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d103      	bne.n	80040de <vQueueWaitForMessageRestricted+0x2a>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d103      	bne.n	80040f4 <vQueueWaitForMessageRestricted+0x40>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f4:	f001 fc12 	bl	800591c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fc5b 	bl	80049c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff fefe 	bl	8003f10 <prvUnlockQueue>
	}
 8004114:	bf00      	nop
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08e      	sub	sp, #56	; 0x38
 8004120:	af04      	add	r7, sp, #16
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	623b      	str	r3, [r7, #32]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xTaskCreateStatic+0x46>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	61fb      	str	r3, [r7, #28]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004162:	23bc      	movs	r3, #188	; 0xbc
 8004164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2bbc      	cmp	r3, #188	; 0xbc
 800416a:	d00a      	beq.n	8004182 <xTaskCreateStatic+0x66>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	61bb      	str	r3, [r7, #24]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01e      	beq.n	80041c6 <xTaskCreateStatic+0xaa>
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01b      	beq.n	80041c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004196:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	2202      	movs	r2, #2
 800419c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041a0:	2300      	movs	r3, #0
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	9302      	str	r3, [sp, #8]
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f851 	bl	8004260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041c0:	f000 f8ec 	bl	800439c <prvAddNewTaskToReadyList>
 80041c4:	e001      	b.n	80041ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041ca:	697b      	ldr	r3, [r7, #20]
	}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	; 0x30
 80041d8:	af04      	add	r7, sp, #16
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 fc67 	bl	8005abc <pvPortMalloc>
 80041ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041f6:	20bc      	movs	r0, #188	; 0xbc
 80041f8:	f001 fc60 	bl	8005abc <pvPortMalloc>
 80041fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
 800420a:	e005      	b.n	8004218 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800420c:	6978      	ldr	r0, [r7, #20]
 800420e:	f001 fd19 	bl	8005c44 <vPortFree>
 8004212:	e001      	b.n	8004218 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d017      	beq.n	800424e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	2300      	movs	r3, #0
 800422a:	9303      	str	r3, [sp, #12]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	9302      	str	r3, [sp, #8]
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f80f 	bl	8004260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004242:	69f8      	ldr	r0, [r7, #28]
 8004244:	f000 f8aa 	bl	800439c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004248:	2301      	movs	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	e002      	b.n	8004254 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004254:	69bb      	ldr	r3, [r7, #24]
	}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	461a      	mov	r2, r3
 8004278:	21a5      	movs	r1, #165	; 0xa5
 800427a:	f001 fe39 	bl	8005ef0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004288:	3b01      	subs	r3, #1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f023 0307 	bic.w	r3, r3, #7
 8004296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	617b      	str	r3, [r7, #20]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e012      	b.n	80042e4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	7819      	ldrb	r1, [r3, #0]
 80042c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	3334      	adds	r3, #52	; 0x34
 80042ce:	460a      	mov	r2, r1
 80042d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d006      	beq.n	80042ec <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3301      	adds	r3, #1
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b0f      	cmp	r3, #15
 80042e8:	d9e9      	bls.n	80042be <prvInitialiseNewTask+0x5e>
 80042ea:	e000      	b.n	80042ee <prvInitialiseNewTask+0x8e>
		{
			break;
 80042ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	2b37      	cmp	r3, #55	; 0x37
 80042fa:	d901      	bls.n	8004300 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042fc:	2337      	movs	r3, #55	; 0x37
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	2200      	movs	r2, #0
 8004310:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fe97 	bl	800304a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	3318      	adds	r3, #24
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fe92 	bl	800304a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	2200      	movs	r2, #0
 8004348:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	3354      	adds	r3, #84	; 0x54
 8004350:	2260      	movs	r2, #96	; 0x60
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f001 fdcb 	bl	8005ef0 <memset>
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <prvInitialiseNewTask+0x130>)
 800435e:	659a      	str	r2, [r3, #88]	; 0x58
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <prvInitialiseNewTask+0x134>)
 8004364:	65da      	str	r2, [r3, #92]	; 0x5c
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <prvInitialiseNewTask+0x138>)
 800436a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	69b8      	ldr	r0, [r7, #24]
 8004372:	f001 f9b1 	bl	80056d8 <pxPortInitialiseStack>
 8004376:	4602      	mov	r2, r0
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004388:	bf00      	nop
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	080061c8 	.word	0x080061c8
 8004394:	080061e8 	.word	0x080061e8
 8004398:	080061a8 	.word	0x080061a8

0800439c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043a4:	f001 fa8a 	bl	80058bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <prvAddNewTaskToReadyList+0xc4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	4a2c      	ldr	r2, [pc, #176]	; (8004460 <prvAddNewTaskToReadyList+0xc4>)
 80043b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043b2:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ba:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043c0:	4b27      	ldr	r3, [pc, #156]	; (8004460 <prvAddNewTaskToReadyList+0xc4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d110      	bne.n	80043ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043c8:	f000 fc28 	bl	8004c1c <prvInitialiseTaskLists>
 80043cc:	e00d      	b.n	80043ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <prvAddNewTaskToReadyList+0xcc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043d6:	4b23      	ldr	r3, [pc, #140]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d802      	bhi.n	80043ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043e4:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <prvAddNewTaskToReadyList+0xd0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <prvAddNewTaskToReadyList+0xd0>)
 80043f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <prvAddNewTaskToReadyList+0xd0>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <prvAddNewTaskToReadyList+0xd4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d903      	bls.n	8004410 <prvAddNewTaskToReadyList+0x74>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <prvAddNewTaskToReadyList+0xd4>)
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <prvAddNewTaskToReadyList+0xd8>)
 800441e:	441a      	add	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f7fe fe1b 	bl	8003062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800442c:	f001 fa76 	bl	800591c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <prvAddNewTaskToReadyList+0xcc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	429a      	cmp	r2, r3
 8004444:	d207      	bcs.n	8004456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <prvAddNewTaskToReadyList+0xdc>)
 8004448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000cd0 	.word	0x20000cd0
 8004464:	20000814 	.word	0x20000814
 8004468:	20000cdc 	.word	0x20000cdc
 800446c:	20000cec 	.word	0x20000cec
 8004470:	20000cd8 	.word	0x20000cd8
 8004474:	20000818 	.word	0x20000818
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <vTaskDelay+0x60>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <vTaskDelay+0x30>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60bb      	str	r3, [r7, #8]
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044ac:	f000 f88a 	bl	80045c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044b0:	2100      	movs	r1, #0
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fdaa 	bl	800500c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044b8:	f000 f892 	bl	80045e0 <xTaskResumeAll>
 80044bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <vTaskDelay+0x64>)
 80044c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000cf8 	.word	0x20000cf8
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044f2:	463a      	mov	r2, r7
 80044f4:	1d39      	adds	r1, r7, #4
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fd54 	bl	8002fa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	9202      	str	r2, [sp, #8]
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	2300      	movs	r3, #0
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	2300      	movs	r3, #0
 8004510:	460a      	mov	r2, r1
 8004512:	4924      	ldr	r1, [pc, #144]	; (80045a4 <vTaskStartScheduler+0xc0>)
 8004514:	4824      	ldr	r0, [pc, #144]	; (80045a8 <vTaskStartScheduler+0xc4>)
 8004516:	f7ff fe01 	bl	800411c <xTaskCreateStatic>
 800451a:	4603      	mov	r3, r0
 800451c:	4a23      	ldr	r2, [pc, #140]	; (80045ac <vTaskStartScheduler+0xc8>)
 800451e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004520:	4b22      	ldr	r3, [pc, #136]	; (80045ac <vTaskStartScheduler+0xc8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e001      	b.n	8004532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004538:	f000 fdbc 	bl	80050b4 <xTimerCreateTimerTask>
 800453c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d11b      	bne.n	800457c <vTaskStartScheduler+0x98>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <vTaskStartScheduler+0xcc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3354      	adds	r3, #84	; 0x54
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <vTaskStartScheduler+0xd0>)
 8004560:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <vTaskStartScheduler+0xd4>)
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <vTaskStartScheduler+0xd8>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <vTaskStartScheduler+0xdc>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004576:	f001 f92f 	bl	80057d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800457a:	e00e      	b.n	800459a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d10a      	bne.n	800459a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <vTaskStartScheduler+0xb4>
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	08006088 	.word	0x08006088
 80045a8:	08004bed 	.word	0x08004bed
 80045ac:	20000cf4 	.word	0x20000cf4
 80045b0:	20000814 	.word	0x20000814
 80045b4:	20000010 	.word	0x20000010
 80045b8:	20000cf0 	.word	0x20000cf0
 80045bc:	20000cdc 	.word	0x20000cdc
 80045c0:	20000cd4 	.word	0x20000cd4

080045c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <vTaskSuspendAll+0x18>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	4a03      	ldr	r2, [pc, #12]	; (80045dc <vTaskSuspendAll+0x18>)
 80045d0:	6013      	str	r3, [r2, #0]
}
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000cf8 	.word	0x20000cf8

080045e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ee:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <xTaskResumeAll+0x118>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <xTaskResumeAll+0x2c>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	603b      	str	r3, [r7, #0]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800460c:	f001 f956 	bl	80058bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004610:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <xTaskResumeAll+0x118>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3b01      	subs	r3, #1
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <xTaskResumeAll+0x118>)
 8004618:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <xTaskResumeAll+0x118>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d162      	bne.n	80046e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004622:	4b36      	ldr	r3, [pc, #216]	; (80046fc <xTaskResumeAll+0x11c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d05e      	beq.n	80046e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800462a:	e02f      	b.n	800468c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800462c:	4b34      	ldr	r3, [pc, #208]	; (8004700 <xTaskResumeAll+0x120>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3318      	adds	r3, #24
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fd6d 	bl	8003118 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3304      	adds	r3, #4
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fd68 	bl	8003118 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <xTaskResumeAll+0x124>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <xTaskResumeAll+0x7c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <xTaskResumeAll+0x124>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a27      	ldr	r2, [pc, #156]	; (8004708 <xTaskResumeAll+0x128>)
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe fcf5 	bl	8003062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4b23      	ldr	r3, [pc, #140]	; (800470c <xTaskResumeAll+0x12c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004686:	4b22      	ldr	r3, [pc, #136]	; (8004710 <xTaskResumeAll+0x130>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800468c:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <xTaskResumeAll+0x120>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1cb      	bne.n	800462c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800469a:	f000 faff 	bl	8004c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <xTaskResumeAll+0x134>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046aa:	f000 f845 	bl	8004738 <xTaskIncrementTick>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046b4:	4b16      	ldr	r3, [pc, #88]	; (8004710 <xTaskResumeAll+0x130>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3b01      	subs	r3, #1
 80046be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f1      	bne.n	80046aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <xTaskResumeAll+0x134>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <xTaskResumeAll+0x130>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <xTaskResumeAll+0x138>)
 80046da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046e8:	f001 f918 	bl	800591c <vPortExitCritical>

	return xAlreadyYielded;
 80046ec:	68bb      	ldr	r3, [r7, #8]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000cf8 	.word	0x20000cf8
 80046fc:	20000cd0 	.word	0x20000cd0
 8004700:	20000ca8 	.word	0x20000ca8
 8004704:	20000cd8 	.word	0x20000cd8
 8004708:	20000818 	.word	0x20000818
 800470c:	20000814 	.word	0x20000814
 8004710:	20000ce4 	.word	0x20000ce4
 8004714:	20000ce0 	.word	0x20000ce0
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <xTaskGetTickCount+0x18>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004728:	687b      	ldr	r3, [r7, #4]
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	20000cd4 	.word	0x20000cd4

08004738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004742:	4b51      	ldr	r3, [pc, #324]	; (8004888 <xTaskIncrementTick+0x150>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 808e 	bne.w	8004868 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800474c:	4b4f      	ldr	r3, [pc, #316]	; (800488c <xTaskIncrementTick+0x154>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004754:	4a4d      	ldr	r2, [pc, #308]	; (800488c <xTaskIncrementTick+0x154>)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d120      	bne.n	80047a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004760:	4b4b      	ldr	r3, [pc, #300]	; (8004890 <xTaskIncrementTick+0x158>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <xTaskIncrementTick+0x48>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	603b      	str	r3, [r7, #0]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <xTaskIncrementTick+0x46>
 8004780:	4b43      	ldr	r3, [pc, #268]	; (8004890 <xTaskIncrementTick+0x158>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	4b43      	ldr	r3, [pc, #268]	; (8004894 <xTaskIncrementTick+0x15c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a41      	ldr	r2, [pc, #260]	; (8004890 <xTaskIncrementTick+0x158>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4a41      	ldr	r2, [pc, #260]	; (8004894 <xTaskIncrementTick+0x15c>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b40      	ldr	r3, [pc, #256]	; (8004898 <xTaskIncrementTick+0x160>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	4a3f      	ldr	r2, [pc, #252]	; (8004898 <xTaskIncrementTick+0x160>)
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	f000 fa7d 	bl	8004c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047a2:	4b3e      	ldr	r3, [pc, #248]	; (800489c <xTaskIncrementTick+0x164>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d34e      	bcc.n	800484a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ac:	4b38      	ldr	r3, [pc, #224]	; (8004890 <xTaskIncrementTick+0x158>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <xTaskIncrementTick+0x82>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <xTaskIncrementTick+0x84>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	4b36      	ldr	r3, [pc, #216]	; (800489c <xTaskIncrementTick+0x164>)
 80047c2:	f04f 32ff 	mov.w	r2, #4294967295
 80047c6:	601a      	str	r2, [r3, #0]
					break;
 80047c8:	e03f      	b.n	800484a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <xTaskIncrementTick+0x158>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d203      	bcs.n	80047ea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047e2:	4a2e      	ldr	r2, [pc, #184]	; (800489c <xTaskIncrementTick+0x164>)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6013      	str	r3, [r2, #0]
						break;
 80047e8:	e02f      	b.n	800484a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fc92 	bl	8003118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3318      	adds	r3, #24
 8004800:	4618      	mov	r0, r3
 8004802:	f7fe fc89 	bl	8003118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480a:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <xTaskIncrementTick+0x168>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d903      	bls.n	800481a <xTaskIncrementTick+0xe2>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	4a22      	ldr	r2, [pc, #136]	; (80048a0 <xTaskIncrementTick+0x168>)
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <xTaskIncrementTick+0x16c>)
 8004828:	441a      	add	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fe fc16 	bl	8003062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <xTaskIncrementTick+0x170>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	429a      	cmp	r2, r3
 8004842:	d3b3      	bcc.n	80047ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004848:	e7b0      	b.n	80047ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <xTaskIncrementTick+0x170>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	4914      	ldr	r1, [pc, #80]	; (80048a4 <xTaskIncrementTick+0x16c>)
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d907      	bls.n	8004872 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004862:	2301      	movs	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e004      	b.n	8004872 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <xTaskIncrementTick+0x174>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <xTaskIncrementTick+0x174>)
 8004870:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <xTaskIncrementTick+0x178>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800487e:	697b      	ldr	r3, [r7, #20]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000cf8 	.word	0x20000cf8
 800488c:	20000cd4 	.word	0x20000cd4
 8004890:	20000ca0 	.word	0x20000ca0
 8004894:	20000ca4 	.word	0x20000ca4
 8004898:	20000ce8 	.word	0x20000ce8
 800489c:	20000cf0 	.word	0x20000cf0
 80048a0:	20000cd8 	.word	0x20000cd8
 80048a4:	20000818 	.word	0x20000818
 80048a8:	20000814 	.word	0x20000814
 80048ac:	20000ce0 	.word	0x20000ce0
 80048b0:	20000ce4 	.word	0x20000ce4

080048b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <vTaskSwitchContext+0xb0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <vTaskSwitchContext+0xb4>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048c8:	e046      	b.n	8004958 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80048ca:	4b27      	ldr	r3, [pc, #156]	; (8004968 <vTaskSwitchContext+0xb4>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048d0:	4b26      	ldr	r3, [pc, #152]	; (800496c <vTaskSwitchContext+0xb8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	e010      	b.n	80048fa <vTaskSwitchContext+0x46>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <vTaskSwitchContext+0x3e>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	491d      	ldr	r1, [pc, #116]	; (8004970 <vTaskSwitchContext+0xbc>)
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0e4      	beq.n	80048d8 <vTaskSwitchContext+0x24>
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4a15      	ldr	r2, [pc, #84]	; (8004970 <vTaskSwitchContext+0xbc>)
 800491a:	4413      	add	r3, r2
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3308      	adds	r3, #8
 8004930:	429a      	cmp	r2, r3
 8004932:	d104      	bne.n	800493e <vTaskSwitchContext+0x8a>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <vTaskSwitchContext+0xc0>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <vTaskSwitchContext+0xb8>)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <vTaskSwitchContext+0xc0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3354      	adds	r3, #84	; 0x54
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <vTaskSwitchContext+0xc4>)
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000cf8 	.word	0x20000cf8
 8004968:	20000ce4 	.word	0x20000ce4
 800496c:	20000cd8 	.word	0x20000cd8
 8004970:	20000818 	.word	0x20000818
 8004974:	20000814 	.word	0x20000814
 8004978:	20000010 	.word	0x20000010

0800497c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60fb      	str	r3, [r7, #12]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049a2:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <vTaskPlaceOnEventList+0x44>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3318      	adds	r3, #24
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fe fb7c 	bl	80030a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049b0:	2101      	movs	r1, #1
 80049b2:	6838      	ldr	r0, [r7, #0]
 80049b4:	f000 fb2a 	bl	800500c <prvAddCurrentTaskToDelayedList>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000814 	.word	0x20000814

080049c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	617b      	str	r3, [r7, #20]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vTaskPlaceOnEventListRestricted+0x54>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3318      	adds	r3, #24
 80049f2:	4619      	mov	r1, r3
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7fe fb34 	bl	8003062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
 8004a04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f000 faff 	bl	800500c <prvAddCurrentTaskToDelayedList>
	}
 8004a0e:	bf00      	nop
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000814 	.word	0x20000814

08004a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60fb      	str	r3, [r7, #12]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe fb63 	bl	8003118 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a52:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <xTaskRemoveFromEventList+0xb0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d11d      	bne.n	8004a96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fb5a 	bl	8003118 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <xTaskRemoveFromEventList+0xb4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d903      	bls.n	8004a78 <xTaskRemoveFromEventList+0x5c>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <xTaskRemoveFromEventList+0xb4>)
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <xTaskRemoveFromEventList+0xb8>)
 8004a86:	441a      	add	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f7fe fae7 	bl	8003062 <vListInsertEnd>
 8004a94:	e005      	b.n	8004aa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3318      	adds	r3, #24
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	480e      	ldr	r0, [pc, #56]	; (8004ad8 <xTaskRemoveFromEventList+0xbc>)
 8004a9e:	f7fe fae0 	bl	8003062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <xTaskRemoveFromEventList+0xc0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d905      	bls.n	8004abc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <xTaskRemoveFromEventList+0xc4>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e001      	b.n	8004ac0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ac0:	697b      	ldr	r3, [r7, #20]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000cf8 	.word	0x20000cf8
 8004ad0:	20000cd8 	.word	0x20000cd8
 8004ad4:	20000818 	.word	0x20000818
 8004ad8:	20000ca8 	.word	0x20000ca8
 8004adc:	20000814 	.word	0x20000814
 8004ae0:	20000ce4 	.word	0x20000ce4

08004ae4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <vTaskInternalSetTimeOutState+0x24>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <vTaskInternalSetTimeOutState+0x28>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	605a      	str	r2, [r3, #4]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000ce8 	.word	0x20000ce8
 8004b0c:	20000cd4 	.word	0x20000cd4

08004b10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60fb      	str	r3, [r7, #12]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b52:	f000 feb3 	bl	80058bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b56:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <xTaskCheckForTimeOut+0xbc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d102      	bne.n	8004b76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	e023      	b.n	8004bbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <xTaskCheckForTimeOut+0xc0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d007      	beq.n	8004b92 <xTaskCheckForTimeOut+0x82>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	e015      	b.n	8004bbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d20b      	bcs.n	8004bb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad2      	subs	r2, r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff9b 	bl	8004ae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	e004      	b.n	8004bbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bbe:	f000 fead 	bl	800591c <vPortExitCritical>

	return xReturn;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000cd4 	.word	0x20000cd4
 8004bd0:	20000ce8 	.word	0x20000ce8

08004bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bd8:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <vTaskMissedYield+0x14>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000ce4 	.word	0x20000ce4

08004bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bf4:	f000 f84c 	bl	8004c90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <prvIdleTask+0x28>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d9f9      	bls.n	8004bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <prvIdleTask+0x2c>)
 8004c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c10:	e7f0      	b.n	8004bf4 <prvIdleTask+0x8>
 8004c12:	bf00      	nop
 8004c14:	20000818 	.word	0x20000818
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	e00c      	b.n	8004c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <prvInitialiseTaskLists+0x58>)
 8004c34:	4413      	add	r3, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe f9e8 	bl	800300c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b37      	cmp	r3, #55	; 0x37
 8004c46:	d9ef      	bls.n	8004c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c48:	480b      	ldr	r0, [pc, #44]	; (8004c78 <prvInitialiseTaskLists+0x5c>)
 8004c4a:	f7fe f9df 	bl	800300c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c4e:	480b      	ldr	r0, [pc, #44]	; (8004c7c <prvInitialiseTaskLists+0x60>)
 8004c50:	f7fe f9dc 	bl	800300c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c54:	480a      	ldr	r0, [pc, #40]	; (8004c80 <prvInitialiseTaskLists+0x64>)
 8004c56:	f7fe f9d9 	bl	800300c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c5a:	480a      	ldr	r0, [pc, #40]	; (8004c84 <prvInitialiseTaskLists+0x68>)
 8004c5c:	f7fe f9d6 	bl	800300c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <prvInitialiseTaskLists+0x6c>)
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <prvInitialiseTaskLists+0x5c>)
 8004c64:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <prvInitialiseTaskLists+0x70>)
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <prvInitialiseTaskLists+0x60>)
 8004c6a:	601a      	str	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000818 	.word	0x20000818
 8004c78:	20000c78 	.word	0x20000c78
 8004c7c:	20000c8c 	.word	0x20000c8c
 8004c80:	20000ca8 	.word	0x20000ca8
 8004c84:	20000cbc 	.word	0x20000cbc
 8004c88:	20000ca0 	.word	0x20000ca0
 8004c8c:	20000ca4 	.word	0x20000ca4

08004c90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <prvResetNextTaskUnblockTime+0x40>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <prvResetNextTaskUnblockTime+0x14>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <prvResetNextTaskUnblockTime+0x16>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <prvResetNextTaskUnblockTime+0x44>)
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cbe:	e008      	b.n	8004cd2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <prvResetNextTaskUnblockTime+0x40>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <prvResetNextTaskUnblockTime+0x44>)
 8004cd0:	6013      	str	r3, [r2, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	20000ca0 	.word	0x20000ca0
 8004ce0:	20000cf0 	.word	0x20000cf0

08004ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <xTaskGetSchedulerState+0x34>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	e008      	b.n	8004d0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf8:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <xTaskGetSchedulerState+0x38>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d00:	2302      	movs	r3, #2
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	e001      	b.n	8004d0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d0a:	687b      	ldr	r3, [r7, #4]
	}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000cdc 	.word	0x20000cdc
 8004d1c:	20000cf8 	.word	0x20000cf8

08004d20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d056      	beq.n	8004de4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <xTaskPriorityInherit+0xd0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d246      	bcs.n	8004dd2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	db06      	blt.n	8004d5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4c:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <xTaskPriorityInherit+0xd0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6959      	ldr	r1, [r3, #20]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <xTaskPriorityInherit+0xd4>)
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	d101      	bne.n	8004d76 <xTaskPriorityInherit+0x56>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <xTaskPriorityInherit+0x58>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe f9c9 	bl	8003118 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <xTaskPriorityInherit+0xd0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <xTaskPriorityInherit+0xd8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d903      	bls.n	8004da4 <xTaskPriorityInherit+0x84>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <xTaskPriorityInherit+0xd8>)
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <xTaskPriorityInherit+0xd4>)
 8004db2:	441a      	add	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7fe f951 	bl	8003062 <vListInsertEnd>
 8004dc0:	e004      	b.n	8004dcc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <xTaskPriorityInherit+0xd0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e008      	b.n	8004de4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <xTaskPriorityInherit+0xd0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d201      	bcs.n	8004de4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004de4:	68fb      	ldr	r3, [r7, #12]
	}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000814 	.word	0x20000814
 8004df4:	20000818 	.word	0x20000818
 8004df8:	20000cd8 	.word	0x20000cd8

08004dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d056      	beq.n	8004ec0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e12:	4b2e      	ldr	r3, [pc, #184]	; (8004ecc <xTaskPriorityDisinherit+0xd0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d00a      	beq.n	8004e32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60fb      	str	r3, [r7, #12]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	60bb      	str	r3, [r7, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e54:	1e5a      	subs	r2, r3, #1
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d02c      	beq.n	8004ec0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d128      	bne.n	8004ec0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe f950 	bl	8003118 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <xTaskPriorityDisinherit+0xd4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d903      	bls.n	8004ea0 <xTaskPriorityDisinherit+0xa4>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <xTaskPriorityDisinherit+0xd4>)
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <xTaskPriorityDisinherit+0xd8>)
 8004eae:	441a      	add	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7fe f8d3 	bl	8003062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ec0:	697b      	ldr	r3, [r7, #20]
	}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000814 	.word	0x20000814
 8004ed0:	20000cd8 	.word	0x20000cd8
 8004ed4:	20000818 	.word	0x20000818

08004ed8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d06f      	beq.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60fb      	str	r3, [r7, #12]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d902      	bls.n	8004f1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	e002      	b.n	8004f24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d050      	beq.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d14b      	bne.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f38:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d10a      	bne.n	8004f58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60bb      	str	r3, [r7, #8]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db04      	blt.n	8004f76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	6959      	ldr	r1, [r3, #20]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004f86:	4413      	add	r3, r2
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	d101      	bne.n	8004f90 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01c      	beq.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe f8bc 	bl	8003118 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d903      	bls.n	8004fb4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a0b      	ldr	r2, [pc, #44]	; (8004fe0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004fc2:	441a      	add	r2, r3
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7fe f849 	bl	8003062 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fd0:	bf00      	nop
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20000814 	.word	0x20000814
 8004fdc:	20000818 	.word	0x20000818
 8004fe0:	20000cd8 	.word	0x20000cd8

08004fe4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ff6:	3201      	adds	r2, #1
 8004ff8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004ffa:	4b03      	ldr	r3, [pc, #12]	; (8005008 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
	}
 8004ffe:	4618      	mov	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000814 	.word	0x20000814

0800500c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <prvAddCurrentTaskToDelayedList+0x90>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501c:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3304      	adds	r3, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe f878 	bl	8003118 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d10a      	bne.n	8005046 <prvAddCurrentTaskToDelayedList+0x3a>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005036:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4819      	ldr	r0, [pc, #100]	; (80050a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005040:	f7fe f80f 	bl	8003062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005044:	e026      	b.n	8005094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4413      	add	r3, r2
 800504c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800504e:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	429a      	cmp	r2, r3
 800505c:	d209      	bcs.n	8005072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7fe f81c 	bl	80030a8 <vListInsert>
}
 8005070:	e010      	b.n	8005094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fe f812 	bl	80030a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d202      	bcs.n	8005094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800508e:	4a08      	ldr	r2, [pc, #32]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6013      	str	r3, [r2, #0]
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000cd4 	.word	0x20000cd4
 80050a0:	20000814 	.word	0x20000814
 80050a4:	20000cbc 	.word	0x20000cbc
 80050a8:	20000ca4 	.word	0x20000ca4
 80050ac:	20000ca0 	.word	0x20000ca0
 80050b0:	20000cf0 	.word	0x20000cf0

080050b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050be:	f000 facb 	bl	8005658 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <xTimerCreateTimerTask+0x80>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d021      	beq.n	800510e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050d2:	1d3a      	adds	r2, r7, #4
 80050d4:	f107 0108 	add.w	r1, r7, #8
 80050d8:	f107 030c 	add.w	r3, r7, #12
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd ff7b 	bl	8002fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	9202      	str	r2, [sp, #8]
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	2302      	movs	r3, #2
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	460a      	mov	r2, r1
 80050f4:	4910      	ldr	r1, [pc, #64]	; (8005138 <xTimerCreateTimerTask+0x84>)
 80050f6:	4811      	ldr	r0, [pc, #68]	; (800513c <xTimerCreateTimerTask+0x88>)
 80050f8:	f7ff f810 	bl	800411c <xTaskCreateStatic>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4a10      	ldr	r2, [pc, #64]	; (8005140 <xTimerCreateTimerTask+0x8c>)
 8005100:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <xTimerCreateTimerTask+0x8c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800510a:	2301      	movs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	613b      	str	r3, [r7, #16]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800512a:	697b      	ldr	r3, [r7, #20]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000d2c 	.word	0x20000d2c
 8005138:	08006090 	.word	0x08006090
 800513c:	08005261 	.word	0x08005261
 8005140:	20000d30 	.word	0x20000d30

08005144 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xTimerGenericCommand+0x2e>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	623b      	str	r3, [r7, #32]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005172:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <xTimerGenericCommand+0x98>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02a      	beq.n	80051d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b05      	cmp	r3, #5
 800518a:	dc18      	bgt.n	80051be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800518c:	f7ff fdaa 	bl	8004ce4 <xTaskGetSchedulerState>
 8005190:	4603      	mov	r3, r0
 8005192:	2b02      	cmp	r3, #2
 8005194:	d109      	bne.n	80051aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <xTimerGenericCommand+0x98>)
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	f107 0110 	add.w	r1, r7, #16
 800519e:	2300      	movs	r3, #0
 80051a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a2:	f7fe f9db 	bl	800355c <xQueueGenericSend>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24
 80051a8:	e012      	b.n	80051d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051aa:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <xTimerGenericCommand+0x98>)
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	f107 0110 	add.w	r1, r7, #16
 80051b2:	2300      	movs	r3, #0
 80051b4:	2200      	movs	r2, #0
 80051b6:	f7fe f9d1 	bl	800355c <xQueueGenericSend>
 80051ba:	6278      	str	r0, [r7, #36]	; 0x24
 80051bc:	e008      	b.n	80051d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <xTimerGenericCommand+0x98>)
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	f107 0110 	add.w	r1, r7, #16
 80051c6:	2300      	movs	r3, #0
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	f7fe fac5 	bl	8003758 <xQueueGenericSendFromISR>
 80051ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3728      	adds	r7, #40	; 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000d2c 	.word	0x20000d2c

080051e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051ea:	4b1c      	ldr	r3, [pc, #112]	; (800525c <prvProcessExpiredTimer+0x7c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd ff8d 	bl	8003118 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d122      	bne.n	800524c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	18d1      	adds	r1, r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f000 f8c8 	bl	80053a8 <prvInsertTimerInActiveList>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d016      	beq.n	800524c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800521e:	2300      	movs	r3, #0
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2300      	movs	r3, #0
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	2100      	movs	r1, #0
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	f7ff ff8b 	bl	8005144 <xTimerGenericCommand>
 800522e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60fb      	str	r3, [r7, #12]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	4798      	blx	r3
}
 8005254:	bf00      	nop
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000d24 	.word	0x20000d24

08005260 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f857 	bl	8005320 <prvGetNextExpireTime>
 8005272:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4619      	mov	r1, r3
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f803 	bl	8005284 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800527e:	f000 f8d5 	bl	800542c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005282:	e7f1      	b.n	8005268 <prvTimerTask+0x8>

08005284 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800528e:	f7ff f999 	bl	80045c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f866 	bl	8005368 <prvSampleTimeNow>
 800529c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d130      	bne.n	8005306 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <prvProcessTimerOrBlockTask+0x3c>
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d806      	bhi.n	80052c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052b2:	f7ff f995 	bl	80045e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff91 	bl	80051e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052be:	e024      	b.n	800530a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <prvProcessTimerOrBlockTask+0x90>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <prvProcessTimerOrBlockTask+0x94>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f7fe fee5 	bl	80040b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052ea:	f7ff f979 	bl	80045e0 <xTaskResumeAll>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <prvProcessTimerOrBlockTask+0x98>)
 80052f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	f3bf 8f6f 	isb	sy
}
 8005304:	e001      	b.n	800530a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005306:	f7ff f96b 	bl	80045e0 <xTaskResumeAll>
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000d28 	.word	0x20000d28
 8005318:	20000d2c 	.word	0x20000d2c
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <prvGetNextExpireTime+0x44>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <prvGetNextExpireTime+0x44>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e001      	b.n	8005356 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005356:	68fb      	ldr	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000d24 	.word	0x20000d24

08005368 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005370:	f7ff f9d4 	bl	800471c <xTaskGetTickCount>
 8005374:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <prvSampleTimeNow+0x3c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d205      	bcs.n	800538c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005380:	f000 f908 	bl	8005594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e002      	b.n	8005392 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005392:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <prvSampleTimeNow+0x3c>)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000d34 	.word	0x20000d34

080053a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d812      	bhi.n	80053f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d302      	bcc.n	80053e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e01b      	b.n	800541a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <prvInsertTimerInActiveList+0x7c>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fd fe5b 	bl	80030a8 <vListInsert>
 80053f2:	e012      	b.n	800541a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d206      	bcs.n	800540a <prvInsertTimerInActiveList+0x62>
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e007      	b.n	800541a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <prvInsertTimerInActiveList+0x80>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3304      	adds	r3, #4
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f7fd fe47 	bl	80030a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800541a:	697b      	ldr	r3, [r7, #20]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000d28 	.word	0x20000d28
 8005428:	20000d24 	.word	0x20000d24

0800542c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08e      	sub	sp, #56	; 0x38
 8005430:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005432:	e09d      	b.n	8005570 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	da18      	bge.n	800546c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	3304      	adds	r3, #4
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	61fb      	str	r3, [r7, #28]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005462:	6850      	ldr	r0, [r2, #4]
 8005464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005466:	6892      	ldr	r2, [r2, #8]
 8005468:	4611      	mov	r1, r2
 800546a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	db7d      	blt.n	800556e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	3304      	adds	r3, #4
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd fe48 	bl	8003118 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005488:	463b      	mov	r3, r7
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff6c 	bl	8005368 <prvSampleTimeNow>
 8005490:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b09      	cmp	r3, #9
 8005496:	d86b      	bhi.n	8005570 <prvProcessReceivedCommands+0x144>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <prvProcessReceivedCommands+0x74>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054c9 	.word	0x080054c9
 80054ac:	08005571 	.word	0x08005571
 80054b0:	08005525 	.word	0x08005525
 80054b4:	0800555d 	.word	0x0800555d
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054c9 	.word	0x080054c9
 80054c0:	08005571 	.word	0x08005571
 80054c4:	08005525 	.word	0x08005525
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	18d1      	adds	r1, r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d6:	f7ff ff67 	bl	80053a8 <prvInsertTimerInActiveList>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d047      	beq.n	8005570 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d13f      	bne.n	8005570 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	441a      	add	r2, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2300      	movs	r3, #0
 80054fe:	2100      	movs	r1, #0
 8005500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005502:	f7ff fe1f 	bl	8005144 <xTimerGenericCommand>
 8005506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d130      	bne.n	8005570 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	61bb      	str	r3, [r7, #24]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	617b      	str	r3, [r7, #20]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	699a      	ldr	r2, [r3, #24]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	18d1      	adds	r1, r2, r3
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005556:	f7ff ff27 	bl	80053a8 <prvInsertTimerInActiveList>
					break;
 800555a:	e009      	b.n	8005570 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005568:	f000 fb6c 	bl	8005c44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800556c:	e000      	b.n	8005570 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800556e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <prvProcessReceivedCommands+0x164>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1d39      	adds	r1, r7, #4
 8005576:	2200      	movs	r2, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fa13 	bl	80039a4 <xQueueReceive>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f47f af57 	bne.w	8005434 <prvProcessReceivedCommands+0x8>
	}
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	3730      	adds	r7, #48	; 0x30
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000d2c 	.word	0x20000d2c

08005594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800559a:	e045      	b.n	8005628 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800559c:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <prvSwitchTimerLists+0xbc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055a6:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <prvSwitchTimerLists+0xbc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fd fdaf 	bl	8003118 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d12e      	bne.n	8005628 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d90e      	bls.n	80055fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <prvSwitchTimerLists+0xbc>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f7fd fd58 	bl	80030a8 <vListInsert>
 80055f8:	e016      	b.n	8005628 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	2100      	movs	r1, #0
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fd9d 	bl	8005144 <xTimerGenericCommand>
 800560a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	603b      	str	r3, [r7, #0]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <prvSwitchTimerLists+0xbc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1b4      	bne.n	800559c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005632:	4b07      	ldr	r3, [pc, #28]	; (8005650 <prvSwitchTimerLists+0xbc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <prvSwitchTimerLists+0xc0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a04      	ldr	r2, [pc, #16]	; (8005650 <prvSwitchTimerLists+0xbc>)
 800563e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005640:	4a04      	ldr	r2, [pc, #16]	; (8005654 <prvSwitchTimerLists+0xc0>)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	6013      	str	r3, [r2, #0]
}
 8005646:	bf00      	nop
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000d24 	.word	0x20000d24
 8005654:	20000d28 	.word	0x20000d28

08005658 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800565e:	f000 f92d 	bl	80058bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <prvCheckForValidListAndQueue+0x60>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d120      	bne.n	80056ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800566a:	4814      	ldr	r0, [pc, #80]	; (80056bc <prvCheckForValidListAndQueue+0x64>)
 800566c:	f7fd fcce 	bl	800300c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005670:	4813      	ldr	r0, [pc, #76]	; (80056c0 <prvCheckForValidListAndQueue+0x68>)
 8005672:	f7fd fccb 	bl	800300c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <prvCheckForValidListAndQueue+0x6c>)
 8005678:	4a10      	ldr	r2, [pc, #64]	; (80056bc <prvCheckForValidListAndQueue+0x64>)
 800567a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800567c:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <prvCheckForValidListAndQueue+0x70>)
 800567e:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <prvCheckForValidListAndQueue+0x68>)
 8005680:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005682:	2300      	movs	r3, #0
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	4b11      	ldr	r3, [pc, #68]	; (80056cc <prvCheckForValidListAndQueue+0x74>)
 8005688:	4a11      	ldr	r2, [pc, #68]	; (80056d0 <prvCheckForValidListAndQueue+0x78>)
 800568a:	2110      	movs	r1, #16
 800568c:	200a      	movs	r0, #10
 800568e:	f7fd fdd5 	bl	800323c <xQueueGenericCreateStatic>
 8005692:	4603      	mov	r3, r0
 8005694:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <prvCheckForValidListAndQueue+0x60>)
 8005696:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005698:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <prvCheckForValidListAndQueue+0x60>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <prvCheckForValidListAndQueue+0x60>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	490b      	ldr	r1, [pc, #44]	; (80056d4 <prvCheckForValidListAndQueue+0x7c>)
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fcb2 	bl	8004010 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ac:	f000 f936 	bl	800591c <vPortExitCritical>
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000d2c 	.word	0x20000d2c
 80056bc:	20000cfc 	.word	0x20000cfc
 80056c0:	20000d10 	.word	0x20000d10
 80056c4:	20000d24 	.word	0x20000d24
 80056c8:	20000d28 	.word	0x20000d28
 80056cc:	20000dd8 	.word	0x20000dd8
 80056d0:	20000d38 	.word	0x20000d38
 80056d4:	08006098 	.word	0x08006098

080056d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b04      	subs	r3, #4
 80056e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3b04      	subs	r3, #4
 80056f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3b04      	subs	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005708:	4a08      	ldr	r2, [pc, #32]	; (800572c <pxPortInitialiseStack+0x54>)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3b14      	subs	r3, #20
 8005712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b20      	subs	r3, #32
 800571e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	08005731 	.word	0x08005731

08005730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <prvTaskExitError+0x54>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d00a      	beq.n	800575a <prvTaskExitError+0x2a>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	60fb      	str	r3, [r7, #12]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <prvTaskExitError+0x28>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	60bb      	str	r3, [r7, #8]
}
 800576c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800576e:	bf00      	nop
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0fc      	beq.n	8005770 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c
	...

08005790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <pxCurrentTCBConst2>)
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	6808      	ldr	r0, [r1, #0]
 8005796:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800579a:	f380 8809 	msr	PSP, r0
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8811 	msr	BASEPRI, r0
 80057aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80057ae:	4770      	bx	lr

080057b0 <pxCurrentTCBConst2>:
 80057b0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop

080057b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80057b8:	4806      	ldr	r0, [pc, #24]	; (80057d4 <prvPortStartFirstTask+0x1c>)
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f380 8808 	msr	MSP, r0
 80057c2:	b662      	cpsie	i
 80057c4:	b661      	cpsie	f
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	df00      	svc	0
 80057d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057d2:	bf00      	nop
 80057d4:	e000ed08 	.word	0xe000ed08

080057d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057de:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <xPortStartScheduler+0xd0>)
 80057e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <xPortStartScheduler+0xd4>)
 8005804:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005806:	4b2a      	ldr	r3, [pc, #168]	; (80058b0 <xPortStartScheduler+0xd8>)
 8005808:	2207      	movs	r2, #7
 800580a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800580c:	e009      	b.n	8005822 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800580e:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <xPortStartScheduler+0xd8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3b01      	subs	r3, #1
 8005814:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <xPortStartScheduler+0xd8>)
 8005816:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d0ef      	beq.n	800580e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800582e:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <xPortStartScheduler+0xd8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1c3 0307 	rsb	r3, r3, #7
 8005836:	2b04      	cmp	r3, #4
 8005838:	d00a      	beq.n	8005850 <xPortStartScheduler+0x78>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	60bb      	str	r3, [r7, #8]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005850:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <xPortStartScheduler+0xd8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <xPortStartScheduler+0xd8>)
 8005858:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <xPortStartScheduler+0xd8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005862:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <xPortStartScheduler+0xd8>)
 8005864:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <xPortStartScheduler+0xdc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a10      	ldr	r2, [pc, #64]	; (80058b4 <xPortStartScheduler+0xdc>)
 8005874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800587a:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <xPortStartScheduler+0xdc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a0d      	ldr	r2, [pc, #52]	; (80058b4 <xPortStartScheduler+0xdc>)
 8005880:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005884:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005886:	f000 f8b9 	bl	80059fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <xPortStartScheduler+0xe0>)
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005890:	f7ff ff92 	bl	80057b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005894:	f7ff f80e 	bl	80048b4 <vTaskSwitchContext>
	prvTaskExitError();
 8005898:	f7ff ff4a 	bl	8005730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	e000e400 	.word	0xe000e400
 80058ac:	20000e28 	.word	0x20000e28
 80058b0:	20000e2c 	.word	0x20000e2c
 80058b4:	e000ed20 	.word	0xe000ed20
 80058b8:	2000000c 	.word	0x2000000c

080058bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	607b      	str	r3, [r7, #4]
}
 80058d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <vPortEnterCritical+0x58>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <vPortEnterCritical+0x58>)
 80058de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <vPortEnterCritical+0x58>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d10f      	bne.n	8005908 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <vPortEnterCritical+0x5c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <vPortEnterCritical+0x4c>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	603b      	str	r3, [r7, #0]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <vPortEnterCritical+0x4a>
	}
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <vPortExitCritical+0x4c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <vPortExitCritical+0x24>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	607b      	str	r3, [r7, #4]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005940:	4b09      	ldr	r3, [pc, #36]	; (8005968 <vPortExitCritical+0x4c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3b01      	subs	r3, #1
 8005946:	4a08      	ldr	r2, [pc, #32]	; (8005968 <vPortExitCritical+0x4c>)
 8005948:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <vPortExitCritical+0x4c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <vPortExitCritical+0x42>
 8005952:	2300      	movs	r3, #0
 8005954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f383 8811 	msr	BASEPRI, r3
}
 800595c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr
 8005968:	2000000c 	.word	0x2000000c
 800596c:	00000000 	.word	0x00000000

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005980:	6010      	str	r0, [r2, #0]
 8005982:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005986:	f04f 0050 	mov.w	r0, #80	; 0x50
 800598a:	f380 8811 	msr	BASEPRI, r0
 800598e:	f7fe ff91 	bl	80048b4 <vTaskSwitchContext>
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8811 	msr	BASEPRI, r0
 800599a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	6808      	ldr	r0, [r1, #0]
 80059a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059a6:	f380 8809 	msr	PSP, r0
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	4770      	bx	lr

080059b0 <pxCurrentTCBConst>:
 80059b0:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	607b      	str	r3, [r7, #4]
}
 80059d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059d2:	f7fe feb1 	bl	8004738 <xTaskIncrementTick>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <SysTick_Handler+0x40>)
 80059de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	2300      	movs	r3, #0
 80059e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f383 8811 	msr	BASEPRI, r3
}
 80059ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <vPortSetupTimerInterrupt+0x30>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <vPortSetupTimerInterrupt+0x34>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <vPortSetupTimerInterrupt+0x38>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <vPortSetupTimerInterrupt+0x3c>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <vPortSetupTimerInterrupt+0x40>)
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a1e:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <vPortSetupTimerInterrupt+0x30>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	e000e010 	.word	0xe000e010
 8005a30:	e000e018 	.word	0xe000e018
 8005a34:	20000000 	.word	0x20000000
 8005a38:	10624dd3 	.word	0x10624dd3
 8005a3c:	e000e014 	.word	0xe000e014

08005a40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a46:	f3ef 8305 	mrs	r3, IPSR
 8005a4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d914      	bls.n	8005a7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a52:	4a16      	ldr	r2, [pc, #88]	; (8005aac <vPortValidateInterruptPriority+0x6c>)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a5c:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <vPortValidateInterruptPriority+0x70>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	7afa      	ldrb	r2, [r7, #11]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d20a      	bcs.n	8005a7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	607b      	str	r3, [r7, #4]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <vPortValidateInterruptPriority+0x74>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <vPortValidateInterruptPriority+0x78>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d90a      	bls.n	8005aa2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	603b      	str	r3, [r7, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <vPortValidateInterruptPriority+0x60>
	}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	e000e3f0 	.word	0xe000e3f0
 8005ab0:	20000e28 	.word	0x20000e28
 8005ab4:	e000ed0c 	.word	0xe000ed0c
 8005ab8:	20000e2c 	.word	0x20000e2c

08005abc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ac8:	f7fe fd7c 	bl	80045c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005acc:	4b58      	ldr	r3, [pc, #352]	; (8005c30 <pvPortMalloc+0x174>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ad4:	f000 f910 	bl	8005cf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ad8:	4b56      	ldr	r3, [pc, #344]	; (8005c34 <pvPortMalloc+0x178>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 808e 	bne.w	8005c02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01d      	beq.n	8005b28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005aec:	2208      	movs	r2, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d014      	beq.n	8005b28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f023 0307 	bic.w	r3, r3, #7
 8005b04:	3308      	adds	r3, #8
 8005b06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <pvPortMalloc+0x6c>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	617b      	str	r3, [r7, #20]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d069      	beq.n	8005c02 <pvPortMalloc+0x146>
 8005b2e:	4b42      	ldr	r3, [pc, #264]	; (8005c38 <pvPortMalloc+0x17c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d864      	bhi.n	8005c02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b38:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <pvPortMalloc+0x180>)
 8005b3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <pvPortMalloc+0x180>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b42:	e004      	b.n	8005b4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d903      	bls.n	8005b60 <pvPortMalloc+0xa4>
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f1      	bne.n	8005b44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b60:	4b33      	ldr	r3, [pc, #204]	; (8005c30 <pvPortMalloc+0x174>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d04b      	beq.n	8005c02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2208      	movs	r2, #8
 8005b70:	4413      	add	r3, r2
 8005b72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	2308      	movs	r3, #8
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d91f      	bls.n	8005bcc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4413      	add	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <pvPortMalloc+0xf8>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	613b      	str	r3, [r7, #16]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bc6:	69b8      	ldr	r0, [r7, #24]
 8005bc8:	f000 f8f8 	bl	8005dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <pvPortMalloc+0x17c>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <pvPortMalloc+0x17c>)
 8005bd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bda:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <pvPortMalloc+0x17c>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <pvPortMalloc+0x184>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d203      	bcs.n	8005bee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <pvPortMalloc+0x17c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <pvPortMalloc+0x184>)
 8005bec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <pvPortMalloc+0x178>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c02:	f7fe fced 	bl	80045e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <pvPortMalloc+0x16a>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <pvPortMalloc+0x168>
	return pvReturn;
 8005c26:	69fb      	ldr	r3, [r7, #28]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3728      	adds	r7, #40	; 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20001be4 	.word	0x20001be4
 8005c34:	20001bf0 	.word	0x20001bf0
 8005c38:	20001be8 	.word	0x20001be8
 8005c3c:	20001bdc 	.word	0x20001bdc
 8005c40:	20001bec 	.word	0x20001bec

08005c44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d048      	beq.n	8005ce8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c56:	2308      	movs	r3, #8
 8005c58:	425b      	negs	r3, r3
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	4b21      	ldr	r3, [pc, #132]	; (8005cf0 <vPortFree+0xac>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <vPortFree+0x44>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <vPortFree+0x62>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60bb      	str	r3, [r7, #8]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <vPortFree+0xac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d019      	beq.n	8005ce8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d115      	bne.n	8005ce8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <vPortFree+0xac>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ccc:	f7fe fc7a 	bl	80045c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <vPortFree+0xb0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4413      	add	r3, r2
 8005cda:	4a06      	ldr	r2, [pc, #24]	; (8005cf4 <vPortFree+0xb0>)
 8005cdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cde:	6938      	ldr	r0, [r7, #16]
 8005ce0:	f000 f86c 	bl	8005dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ce4:	f7fe fc7c 	bl	80045e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ce8:	bf00      	nop
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20001bf0 	.word	0x20001bf0
 8005cf4:	20001be8 	.word	0x20001be8

08005cf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cfe:	f640 53ac 	movw	r3, #3500	; 0xdac
 8005d02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d04:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <prvHeapInit+0xac>)
 8005d06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3307      	adds	r3, #7
 8005d16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <prvHeapInit+0xac>)
 8005d28:	4413      	add	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d30:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <prvHeapInit+0xb0>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d36:	4b1c      	ldr	r3, [pc, #112]	; (8005da8 <prvHeapInit+0xb0>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4413      	add	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d44:	2208      	movs	r2, #8
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0307 	bic.w	r3, r3, #7
 8005d52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <prvHeapInit+0xb4>)
 8005d58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <prvHeapInit+0xb4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <prvHeapInit+0xb4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <prvHeapInit+0xb4>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <prvHeapInit+0xb8>)
 8005d86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <prvHeapInit+0xbc>)
 8005d8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <prvHeapInit+0xc0>)
 8005d92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d96:	601a      	str	r2, [r3, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20000e30 	.word	0x20000e30
 8005da8:	20001bdc 	.word	0x20001bdc
 8005dac:	20001be4 	.word	0x20001be4
 8005db0:	20001bec 	.word	0x20001bec
 8005db4:	20001be8 	.word	0x20001be8
 8005db8:	20001bf0 	.word	0x20001bf0

08005dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <prvInsertBlockIntoFreeList+0xa8>)
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e002      	b.n	8005dd0 <prvInsertBlockIntoFreeList+0x14>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8f7      	bhi.n	8005dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4413      	add	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d108      	bne.n	8005dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	441a      	add	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	441a      	add	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d118      	bne.n	8005e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <prvInsertBlockIntoFreeList+0xac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d00d      	beq.n	8005e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	441a      	add	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e008      	b.n	8005e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <prvInsertBlockIntoFreeList+0xac>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e003      	b.n	8005e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d002      	beq.n	8005e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr
 8005e64:	20001bdc 	.word	0x20001bdc
 8005e68:	20001be4 	.word	0x20001be4

08005e6c <__errno>:
 8005e6c:	4b01      	ldr	r3, [pc, #4]	; (8005e74 <__errno+0x8>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000010 	.word	0x20000010

08005e78 <__libc_init_array>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	4d0c      	ldr	r5, [pc, #48]	; (8005eb0 <__libc_init_array+0x38>)
 8005e7e:	4c0d      	ldr	r4, [pc, #52]	; (8005eb4 <__libc_init_array+0x3c>)
 8005e80:	1b64      	subs	r4, r4, r5
 8005e82:	10a4      	asrs	r4, r4, #2
 8005e84:	42a6      	cmp	r6, r4
 8005e86:	d109      	bne.n	8005e9c <__libc_init_array+0x24>
 8005e88:	f000 f8b0 	bl	8005fec <_init>
 8005e8c:	2600      	movs	r6, #0
 8005e8e:	4d0a      	ldr	r5, [pc, #40]	; (8005eb8 <__libc_init_array+0x40>)
 8005e90:	4c0a      	ldr	r4, [pc, #40]	; (8005ebc <__libc_init_array+0x44>)
 8005e92:	1b64      	subs	r4, r4, r5
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	42a6      	cmp	r6, r4
 8005e98:	d105      	bne.n	8005ea6 <__libc_init_array+0x2e>
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea0:	4798      	blx	r3
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	e7ee      	b.n	8005e84 <__libc_init_array+0xc>
 8005ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eaa:	4798      	blx	r3
 8005eac:	3601      	adds	r6, #1
 8005eae:	e7f2      	b.n	8005e96 <__libc_init_array+0x1e>
 8005eb0:	08006208 	.word	0x08006208
 8005eb4:	08006208 	.word	0x08006208
 8005eb8:	08006208 	.word	0x08006208
 8005ebc:	0800620c 	.word	0x0800620c

08005ec0 <__retarget_lock_acquire_recursive>:
 8005ec0:	4770      	bx	lr

08005ec2 <__retarget_lock_release_recursive>:
 8005ec2:	4770      	bx	lr

08005ec4 <malloc>:
 8005ec4:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <malloc+0xc>)
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f000 b819 	b.w	8005f00 <_malloc_r>
 8005ece:	bf00      	nop
 8005ed0:	20000010 	.word	0x20000010

08005ed4 <memcpy>:
 8005ed4:	440a      	add	r2, r1
 8005ed6:	4291      	cmp	r1, r2
 8005ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005edc:	d100      	bne.n	8005ee0 <memcpy+0xc>
 8005ede:	4770      	bx	lr
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee6:	4291      	cmp	r1, r2
 8005ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eec:	d1f9      	bne.n	8005ee2 <memcpy+0xe>
 8005eee:	bd10      	pop	{r4, pc}

08005ef0 <memset>:
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4402      	add	r2, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <_malloc_r>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	1ccd      	adds	r5, r1, #3
 8005f04:	f025 0503 	bic.w	r5, r5, #3
 8005f08:	3508      	adds	r5, #8
 8005f0a:	2d0c      	cmp	r5, #12
 8005f0c:	bf38      	it	cc
 8005f0e:	250c      	movcc	r5, #12
 8005f10:	2d00      	cmp	r5, #0
 8005f12:	4606      	mov	r6, r0
 8005f14:	db01      	blt.n	8005f1a <_malloc_r+0x1a>
 8005f16:	42a9      	cmp	r1, r5
 8005f18:	d903      	bls.n	8005f22 <_malloc_r+0x22>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	2000      	movs	r0, #0
 8005f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f22:	f000 f857 	bl	8005fd4 <__malloc_lock>
 8005f26:	4921      	ldr	r1, [pc, #132]	; (8005fac <_malloc_r+0xac>)
 8005f28:	680a      	ldr	r2, [r1, #0]
 8005f2a:	4614      	mov	r4, r2
 8005f2c:	b99c      	cbnz	r4, 8005f56 <_malloc_r+0x56>
 8005f2e:	4f20      	ldr	r7, [pc, #128]	; (8005fb0 <_malloc_r+0xb0>)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	b923      	cbnz	r3, 8005f3e <_malloc_r+0x3e>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4630      	mov	r0, r6
 8005f38:	f000 f83c 	bl	8005fb4 <_sbrk_r>
 8005f3c:	6038      	str	r0, [r7, #0]
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 f837 	bl	8005fb4 <_sbrk_r>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d123      	bne.n	8005f92 <_malloc_r+0x92>
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	f000 f846 	bl	8005fe0 <__malloc_unlock>
 8005f54:	e7e3      	b.n	8005f1e <_malloc_r+0x1e>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	1b5b      	subs	r3, r3, r5
 8005f5a:	d417      	bmi.n	8005f8c <_malloc_r+0x8c>
 8005f5c:	2b0b      	cmp	r3, #11
 8005f5e:	d903      	bls.n	8005f68 <_malloc_r+0x68>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	441c      	add	r4, r3
 8005f64:	6025      	str	r5, [r4, #0]
 8005f66:	e004      	b.n	8005f72 <_malloc_r+0x72>
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	42a2      	cmp	r2, r4
 8005f6c:	bf0c      	ite	eq
 8005f6e:	600b      	streq	r3, [r1, #0]
 8005f70:	6053      	strne	r3, [r2, #4]
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 f834 	bl	8005fe0 <__malloc_unlock>
 8005f78:	f104 000b 	add.w	r0, r4, #11
 8005f7c:	1d23      	adds	r3, r4, #4
 8005f7e:	f020 0007 	bic.w	r0, r0, #7
 8005f82:	1ac2      	subs	r2, r0, r3
 8005f84:	d0cc      	beq.n	8005f20 <_malloc_r+0x20>
 8005f86:	1a1b      	subs	r3, r3, r0
 8005f88:	50a3      	str	r3, [r4, r2]
 8005f8a:	e7c9      	b.n	8005f20 <_malloc_r+0x20>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	6864      	ldr	r4, [r4, #4]
 8005f90:	e7cc      	b.n	8005f2c <_malloc_r+0x2c>
 8005f92:	1cc4      	adds	r4, r0, #3
 8005f94:	f024 0403 	bic.w	r4, r4, #3
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	d0e3      	beq.n	8005f64 <_malloc_r+0x64>
 8005f9c:	1a21      	subs	r1, r4, r0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f000 f808 	bl	8005fb4 <_sbrk_r>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d1dd      	bne.n	8005f64 <_malloc_r+0x64>
 8005fa8:	e7cf      	b.n	8005f4a <_malloc_r+0x4a>
 8005faa:	bf00      	nop
 8005fac:	20001bf4 	.word	0x20001bf4
 8005fb0:	20001bf8 	.word	0x20001bf8

08005fb4 <_sbrk_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4d05      	ldr	r5, [pc, #20]	; (8005fd0 <_sbrk_r+0x1c>)
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fa fda4 	bl	8000b0c <_sbrk>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_sbrk_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_sbrk_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20001cfc 	.word	0x20001cfc

08005fd4 <__malloc_lock>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	; (8005fdc <__malloc_lock+0x8>)
 8005fd6:	f7ff bf73 	b.w	8005ec0 <__retarget_lock_acquire_recursive>
 8005fda:	bf00      	nop
 8005fdc:	20001cf4 	.word	0x20001cf4

08005fe0 <__malloc_unlock>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <__malloc_unlock+0x8>)
 8005fe2:	f7ff bf6e 	b.w	8005ec2 <__retarget_lock_release_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	20001cf4 	.word	0x20001cf4

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr
